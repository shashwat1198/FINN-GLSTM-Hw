//This file is the baseline hardware implementation for the LSTM-IDS model.

#include "pipeline-lstm-header.h"
#include "ap_axi_sdata.h"
#include <stdio.h>
#include "hls_stream.h"
#include <algorithm>
#include <functional>
#include <string>
#include <fstream>
#include <sstream>
#include "hls_print.h"

//---------------- MultiThresholding requirements -------------------------------
//Multithreshold object creation
ThresholdsActivation<1, 1, Act_N_255, qlstm_f32_t, qlstm_int8_t,-128> th0;
ThresholdsActivation<1, 1, Act_N_255, qlstm_f32_t, qlstm_int8_t,-128> th1;
ThresholdsActivation<1, 1, Act_N_63, qlstm_f32_t, qlstm_int6_t,-32> th2;
ThresholdsActivation<Out_N, 1, Act_N_62, qlstm_int32_t, qlstm_int6_t,-31> th3;
ThresholdsActivation<Out_N, 1, Act_N_62, qlstm_int32_t, qlstm_int6_t,-31> th4;
ThresholdsActivation<Out_N, 1, Act_N_62, qlstm_int32_t, qlstm_int6_t,-31> th5;
ThresholdsActivation<Out_N, 1, Act_N_62, qlstm_int32_t, qlstm_int6_t,-31> th6;
ThresholdsActivation<1, 1, Act_N_63, qlstm_int8_t, qlstm_uint6_t,0,comp::less_equal<qlstm_int8_t,qlstm_int8_t>> th_act7; //
ThresholdsActivation<1, 1, Act_N_63, qlstm_int8_t, qlstm_int7_t,-31,comp::less_equal<qlstm_int8_t,qlstm_int8_t>> th_act8; //
ThresholdsActivation<1, 1, Act_N_63, qlstm_int8_t, qlstm_uint6_t,0,comp::less_equal<qlstm_int8_t,qlstm_int8_t>> th_act9;
ThresholdsActivation<1, 1, Act_N_63, qlstm_int8_t, qlstm_uint6_t,0,comp::less_equal<qlstm_int8_t,qlstm_int8_t>> th_act10;
ThresholdsActivation<1, 1, Act_N_62, qlstm_int32_t, qlstm_int6_t,-31> th11; //try both 9 and 10 with int6 output type later
ThresholdsActivation<1, 1, Act_N_62, qlstm_int32_t, qlstm_int6_t,-31> th12;
ThresholdsActivation<1, 1, Act_N_62, qlstm_int32_t, qlstm_int6_t,-31,comp::less_equal<qlstm_int32_t,qlstm_int32_t>> th13;
ThresholdsActivation<1, 1, Act_N_62, qlstm_int32_t, qlstm_int6_t,-31,comp::less_equal<qlstm_int32_t,qlstm_int32_t>> th14;
ThresholdsActivation<1, 1, Act_N_63, qlstm_int8_t, qlstm_int7_t, -31 ,comp::less_equal<qlstm_int8_t,qlstm_int8_t>> th15; // ,comp::less_equal<qlstm_f32_t,qlstm_f32_t>
ThresholdsActivation<1, 1, Act_N_255, qlstm_int32_t, qlstm_int8_t,-128> th16;
ThresholdsActivation<1, 1, Act_N_255, qlstm_int32_t, qlstm_int8_t,-128> th17;

//Initializing thresholds for multithresholding operation.
void initializeThresholds_1(const qlstm_int32_t mt_3[Out_N][Act_N_62],const qlstm_int32_t mt_4[Out_N][Act_N_62],
		const qlstm_int32_t mt_5[Out_N][Act_N_62], const qlstm_int32_t mt_6[Out_N][Act_N_62]
		){

	for (unsigned pe = 0; pe < 1; pe++) {
        for (unsigned nf = 0; nf < Out_N; nf++) {
            for (unsigned th = 0; th < Act_N_62; th++) {
#pragma HLS pipeline II=1
                th3.m_thresholds[pe][nf][th] = mt_3[nf][th];
                th4.m_thresholds[pe][nf][th] = mt_4[nf][th];
                th5.m_thresholds[pe][nf][th] = mt_5[nf][th];
                th6.m_thresholds[pe][nf][th] = mt_6[nf][th];
            }
        }
    }
}

void initializeThresholds_2(
		const qlstm_f32_t  mt_0[Act_N_255],const qlstm_f32_t  mt_1[Act_N_255],const qlstm_f32_t  mt_2[Act_N_63],
		const qlstm_int8_t mt_7[Act_N_63], const qlstm_int8_t mt_8[Act_N_63],const qlstm_int8_t  mt_9[Act_N_63],const qlstm_int8_t  mt_10[Act_N_63],
		const qlstm_int32_t mt_11[Act_N_62], const qlstm_int32_t mt_12[Act_N_62],
		const qlstm_int32_t mt_13[Act_N_62], const qlstm_int32_t mt_14[Act_N_62],
		const qlstm_int8_t mt_15[Act_N_63],
		const qlstm_int32_t mt_16[Act_N_255],const qlstm_int32_t mt_17[Act_N_255]
		) {

	for (unsigned pe = 0; pe < 1; pe++) {
        for (unsigned nf = 0; nf < 1; nf++) {
            for (unsigned th = 0; th < Act_N_255; th++) {
#pragma HLS pipeline II=1
                th0.m_thresholds[pe][nf][th] = mt_0[th];
                th1.m_thresholds[pe][nf][th] = mt_1[th];
                th16.m_thresholds[pe][nf][th] = mt_16[th];
                th17.m_thresholds[pe][nf][th] = mt_17[th];
            }
        }
    }

	for (unsigned pe = 0; pe < 1; pe++) {
        for (unsigned nf = 0; nf < 1; nf++) {
            for (unsigned th = 0; th < Act_N_62; th++) {
#pragma HLS pipeline II=1
            	th11.m_thresholds[pe][nf][th] = mt_11[th];
            	th12.m_thresholds[pe][nf][th] = mt_12[th];
                th13.m_thresholds[pe][nf][th] = mt_13[th];
                th14.m_thresholds[pe][nf][th] = mt_14[th];
            }
        }
    }


	for (unsigned pe = 0; pe < 1; pe++) {
        for (unsigned nf = 0; nf < 1; nf++) {
            for (unsigned th = 0; th < Act_N_63; th++) {
#pragma HLS pipeline II=1
            	th2.m_thresholds[pe][nf][th] = mt_2[th];
                th_act7.m_thresholds[pe][nf][th] = mt_7[th];
                th_act8.m_thresholds[pe][nf][th] = mt_8[th];
                th_act9.m_thresholds[pe][nf][th] = mt_9[th];
                th_act10.m_thresholds[pe][nf][th] = mt_10[th];
                th15.m_thresholds[pe][nf][th] = mt_15[th];
            }
        }
    }


}

//Matmul weights object creation (LSTM + Dense Layers)
FixedPointWeights <1,qlstm_int8_t,Out_N,Inp_N> mm_wt_o0;
FixedPointWeights <1,qlstm_int8_t,Out_N,Inp_N> mm_wt_o1;
FixedPointWeights <1,qlstm_int8_t,Out_N,Inp_N> mm_wt_o2;
FixedPointWeights <1,qlstm_int8_t,Out_N,Inp_N> mm_wt_o3;
FixedPointWeights <1,qlstm_int8_t,Out_N,Out_N> mm_wt_o4;
FixedPointWeights <1,qlstm_int8_t,Out_N,Out_N> mm_wt_o5;
FixedPointWeights <1,qlstm_int8_t,Out_N,Out_N> mm_wt_o6;
FixedPointWeights <1,qlstm_int8_t,Out_N,Out_N> mm_wt_o7;

//Initializing weights for matmul operation.
void initializeWeights(
		const qlstm_int8_t mm_weights_0[Out_N][Inp_N], const qlstm_int8_t mm_weights_1[Out_N][Inp_N], const qlstm_int8_t mm_weights_2[Out_N][Inp_N], const qlstm_int8_t mm_weights_3[Out_N][Inp_N],
		const qlstm_int8_t mm_weights_4[Out_N][Out_N], const qlstm_int8_t mm_weights_5[Out_N][Out_N], const qlstm_int8_t mm_weights_6[Out_N][Out_N], const qlstm_int8_t mm_weights_7[Out_N][Out_N]
		)
{

//LSTM layer matmul weight initilaization

	 for (unsigned pe = 0; pe < Out_N; ++pe) {
		 	        for (unsigned tile = 0; tile < Inp_N; ++tile) {
#pragma HLS pipeline II=1
		 	        	mm_wt_o0.m_weights[pe][tile] = mm_weights_0[pe][tile];
		 	        	mm_wt_o1.m_weights[pe][tile] = mm_weights_1[pe][tile];
		 	        	mm_wt_o2.m_weights[pe][tile] = mm_weights_2[pe][tile];
		 	        	mm_wt_o3.m_weights[pe][tile] = mm_weights_3[pe][tile];
		 	            }
		 	       for (unsigned tile2 = 0; tile2 < Out_N; ++tile2) {
#pragma HLS pipeline II=1
		 	      		mm_wt_o4.m_weights[pe][tile2] = mm_weights_4[pe][tile2];
		 	      		mm_wt_o5.m_weights[pe][tile2] = mm_weights_5[pe][tile2];
		 	      	    mm_wt_o6.m_weights[pe][tile2] = mm_weights_6[pe][tile2];
		 	      	    mm_wt_o7.m_weights[pe][tile2] = mm_weights_7[pe][tile2];
		 	      		}
		 	        }
}


//-------------- Elementwise helper functions ---------------------------------------

// Templated add struct for elementwise add
template <typename T1, typename T2>
struct ElAdd {
    T2 operator()(const T1& a, const T1& b) const {
        return a + b;
    }
};

// Templated mul struct for elementwise mul
template <typename T1, typename T2, typename T3>
struct ElMul {
    T3 operator()(const T1& a, const T2& b) const {
        return a * b;
    }
};

//-------------------- Top function ------------------------

void qlstm_top_2(
		//inputs
		hls::stream<ap_axis<32,2,5,6>>& x_input_final,
		//output streams
		hls::stream<ap_axis<32,2,5,6>>& final_output
){

//Input/Output AXI-Stream definitions
	#pragma HLS INTERFACE mode=axis port=x_input_final //axis
	#pragma HLS INTERFACE mode=axis port=final_output//axis
	#pragma hls interface s_axilite port=return

//-------------------- Intermediate Stream Definition ----------------------------------------
	hls::stream<qlstm_int8_t> out_mt0_0("00");
	hls::stream<qlstm_int8_t> out_mt0_1("01");
	hls::stream<qlstm_int8_t> out_mt0_2("02");
	hls::stream<qlstm_int8_t> out_mt0_3("03");
	hls::stream<qlstm_int8_t> out_mt1_0("10");
	hls::stream<qlstm_int8_t> out_mt1_1("11");
	hls::stream<qlstm_int8_t> out_mt1_2("12");
	hls::stream<qlstm_int8_t> out_mt1_3("13");
	hls::stream<qlstm_int6_t> out_inp_cell_state("14");
	hls::stream<qlstm_int6_t> out_mt1("1");
	hls::stream<qlstm_int6_t> out_mt2("2");
	hls::stream<qlstm_int6_t> out_mt3("3");
	hls::stream<qlstm_int6_t> out_mt4("4");
	hls::stream<qlstm_uint6_t> out_mt5("5");
	hls::stream<qlstm_int7_t> out_mt6("6");
	hls::stream<qlstm_uint6_t> out_mt7("7");
	hls::stream<qlstm_uint6_t> out_mt8("8");
	hls::stream<qlstm_int32_t> out_eladd0("24");
	hls::stream<qlstm_int32_t> out_eladd1("25");
	hls::stream<qlstm_int32_t> out_eladd2("26");
	hls::stream<qlstm_int32_t> out_eladd3("27");
	hls::stream<qlstm_int32_t> out_elmul0("29");
	hls::stream<qlstm_int32_t> out_elmul1("30");
	hls::stream<qlstm_int6_t> out_mt9("9");
	hls::stream<qlstm_int6_t> out_mt10("10");
	hls::stream<qlstm_int32_t> out_eladd4("28");
	hls::stream<qlstm_int32_t> out_eladd4_2("281");
	hls::stream<qlstm_int32_t> out_eladd4_3("282");
	hls::stream<qlstm_int8_t> out_sm3("40");
	hls::stream<qlstm_int6_t> out_mt11("11");
	hls::stream<qlstm_int7_t> out_mt12("12");
	hls::stream<qlstm_uint8_t> out_mt13("13");
	hls::stream<qlstm_int8_t> out_mt14("14");
	hls::stream<qlstm_uint8_t> out_mt15("15");
	hls::stream<qlstm_uint8_t> out_mt16("151");
	hls::stream<qlstm_uint8_t> out_mt17("152");
	hls::stream<qlstm_int32_t> out_mm0("16");
	hls::stream<qlstm_int32_t> out_mm1("17");
	hls::stream<qlstm_int32_t> out_mm2("18");
	hls::stream<qlstm_int32_t> out_mm3("19");
	hls::stream<qlstm_int32_t> out_mm4("20");
	hls::stream<qlstm_int32_t> out_mm5("21");
	hls::stream<qlstm_int32_t> out_mm6("22");
	hls::stream<qlstm_int32_t> out_mm7("23");
	hls::stream<qlstm_int32_t> out_mm8("231");
	hls::stream<qlstm_int32_t> out_mm9("232");
	hls::stream<qlstm_int32_t> out_mm10("233");
	hls::stream<qlstm_int32_t> out_elmul3("31");
	hls::stream<qlstm_int32_t> out_elmul3_2("312");
	hls::stream<qlstm_int32_t> out_elmul3_3("313");


#pragma HLS STREAM variable=out_mt0_0 depth=128
#pragma HLS STREAM variable=out_mt0_1 depth=128
#pragma HLS STREAM variable=out_mt0_2 depth=128
#pragma HLS STREAM variable=out_mt0_3 depth=128
#pragma HLS STREAM variable=out_mt1_0 depth=128
#pragma HLS STREAM variable=out_mt1_1 depth=128
#pragma HLS STREAM variable=out_mt1_2 depth=128
#pragma HLS STREAM variable=out_mt1_3 depth=128
#pragma HLS STREAM variable=out_inp_cell_state depth=128
#pragma HLS STREAM variable=out_mt1 depth=128
#pragma HLS STREAM variable=out_mt2 depth=128
#pragma HLS STREAM variable=out_mt3 depth=128
#pragma HLS STREAM variable=out_mt4 depth=128
#pragma HLS STREAM variable=out_mt5 depth=128
#pragma HLS STREAM variable=out_mt6 depth=128
#pragma HLS STREAM variable=out_mt7 depth=128
#pragma HLS STREAM variable=out_mt8 depth=128
#pragma HLS STREAM variable=out_mt9 depth=128
#pragma HLS STREAM variable=out_mt10 depth=128
#pragma HLS STREAM variable=out_mt11 depth=128
#pragma HLS STREAM variable=out_mt12 depth=128
#pragma HLS STREAM variable=out_mt13 depth=128
#pragma HLS STREAM variable=out_mt15 depth=128
#pragma HLS STREAM variable=out_mt16 depth=128
#pragma HLS STREAM variable=out_eladd0 depth=128
#pragma HLS STREAM variable=out_eladd1 depth=128
#pragma HLS STREAM variable=out_eladd2 depth=128
#pragma HLS STREAM variable=out_eladd3 depth=128
#pragma HLS STREAM variable=out_mm0 depth=128
#pragma HLS STREAM variable=out_mm1 depth=128
#pragma HLS STREAM variable=out_mm2 depth=128
#pragma HLS STREAM variable=out_mm3 depth=128
#pragma HLS STREAM variable=out_mm4 depth=128
#pragma HLS STREAM variable=out_mm5 depth=128
#pragma HLS STREAM variable=out_mm6 depth=128
#pragma HLS STREAM variable=out_mm7 depth=128
#pragma HLS STREAM variable=out_mm8 depth=128
#pragma HLS STREAM variable=out_mm9 depth=128
#pragma HLS STREAM variable=out_mm10 depth=128
#pragma HLS STREAM variable=out_elmul0 depth=128
#pragma HLS STREAM variable=out_elmul1 depth=128
#pragma HLS STREAM variable=out_eladd4 depth=128
#pragma HLS STREAM variable=out_eladd4_2 depth=128
#pragma HLS STREAM variable=out_eladd4_3 depth=128
#pragma HLS STREAM variable=out_elmul3 depth=128
#pragma HLS STREAM variable=out_elmul3_2 depth=128
#pragma HLS STREAM variable=out_elmul3_3 depth=128
#pragma HLS STREAM variable=out_sm3 depth=128

	const qlstm_f32_t mt_weights_0[Act_N_255] = {
			-4.023309,-3.991754,-3.960198,-3.928643,-3.897088,-3.865532,-3.833977,-3.802422,-3.770866,-3.739311,-3.707756,-3.676200,-3.644645,-3.613089,-3.581534,-3.549979,-3.518423,-3.486868,-3.455312,-3.423757,-3.392202,-3.360646,-3.329091,-3.297536,-3.265980,-3.234425,-3.202870,-3.171314,-3.139759,-3.108203,-3.076648,-3.045093,-3.013537,-2.981982,-2.950427,-2.918871,-2.887316,-2.855761,-2.824205,-2.792650,-2.761095,-2.729539,-2.697984,-2.666428,-2.634873,-2.603317,-2.571762,-2.540207,-2.508651,-2.477096,-2.445541,-2.413985,-2.382430,-2.350875,-2.319319,-2.287764,-2.256208,-2.224653,-2.193098,-2.161542,-2.129987,-2.098432,-2.066876,-2.035321,-2.003766,-1.972210,-1.940655,-1.909099,-1.877544,-1.845989,-1.814433,-1.782878,-1.751323,-1.719767,-1.688212,-1.656657,-1.625101,-1.593546,-1.561990,-1.530435,-1.498880,-1.467324,-1.435769,-1.404214,-1.372658,-1.341103,-1.309547,-1.277992,-1.246437,-1.214881,-1.183326,-1.151771,-1.120215,-1.088660,-1.057104,-1.025549,-0.993994,-0.962438,-0.930883,-0.899328,-0.867772,-0.836217,-0.804662,-0.773106,-0.741551,-0.709995,-0.678440,-0.646885,-0.615329,-0.583774,-0.552219,-0.520663,-0.489108,-0.457552,-0.425997,-0.394442,-0.362886,-0.331331,-0.299776,-0.268220,-0.236665,-0.205110,-0.173554,-0.141999,-0.110443,-0.078888,-0.047333,-0.015777,0.015778,0.047333,0.078889,0.110444,0.142000,0.173555,0.205110,0.236666,0.268221,0.299776,0.331332,0.362887,0.394442,0.425998,0.457553,0.489109,0.520664,0.552219,0.583775,0.615330,0.646885,0.678441,0.709996,0.741552,0.773107,0.804662,0.836218,0.867773,0.899328,0.930884,0.962439,0.993995,1.025550,1.057105,1.088661,1.120216,1.151771,1.183327,1.214882,1.246437,1.277993,1.309548,1.341104,1.372659,1.404214,1.435770,1.467325,1.498880,1.530436,1.561991,1.593547,1.625102,1.656657,1.688213,1.719768,1.751323,1.782879,1.814434,1.845989,1.877545,1.909100,1.940656,1.972211,2.003766,2.035322,2.066877,2.098433,2.129988,2.161543,2.193099,2.224654,2.256209,2.287765,2.319320,2.350875,2.382431,2.413986,2.445542,2.477097,2.508652,2.540208,2.571763,2.603318,2.634874,2.666429,2.697984,2.729540,2.761095,2.792651,2.824206,2.855761,2.887317,2.918872,2.950428,2.981983,3.013538,3.045094,3.076649,3.108204,3.139760,3.171315,3.202870,3.234426,3.265981,3.297536,3.329092,3.360647,3.392203,3.423758,3.455313,3.486869,3.518424,3.549979,3.581535,3.613090,3.644645,3.676201,3.707756,3.739312,3.770867,3.802423,3.833978,3.865533,3.897089,3.928644,3.960199,3.991755
	};
	const qlstm_f32_t mt_weights_1[Act_N_255] = {
			-4.023309,-3.991754,-3.960198,-3.928643,-3.897088,-3.865532,-3.833977,-3.802422,-3.770866,-3.739311,-3.707756,-3.676200,-3.644645,-3.613089,-3.581534,-3.549979,-3.518423,-3.486868,-3.455312,-3.423757,-3.392202,-3.360646,-3.329091,-3.297536,-3.265980,-3.234425,-3.202870,-3.171314,-3.139759,-3.108203,-3.076648,-3.045093,-3.013537,-2.981982,-2.950427,-2.918871,-2.887316,-2.855761,-2.824205,-2.792650,-2.761095,-2.729539,-2.697984,-2.666428,-2.634873,-2.603317,-2.571762,-2.540207,-2.508651,-2.477096,-2.445541,-2.413985,-2.382430,-2.350875,-2.319319,-2.287764,-2.256208,-2.224653,-2.193098,-2.161542,-2.129987,-2.098432,-2.066876,-2.035321,-2.003766,-1.972210,-1.940655,-1.909099,-1.877544,-1.845989,-1.814433,-1.782878,-1.751323,-1.719767,-1.688212,-1.656657,-1.625101,-1.593546,-1.561990,-1.530435,-1.498880,-1.467324,-1.435769,-1.404214,-1.372658,-1.341103,-1.309547,-1.277992,-1.246437,-1.214881,-1.183326,-1.151771,-1.120215,-1.088660,-1.057104,-1.025549,-0.993994,-0.962438,-0.930883,-0.899328,-0.867772,-0.836217,-0.804662,-0.773106,-0.741551,-0.709995,-0.678440,-0.646885,-0.615329,-0.583774,-0.552219,-0.520663,-0.489108,-0.457552,-0.425997,-0.394442,-0.362886,-0.331331,-0.299776,-0.268220,-0.236665,-0.205110,-0.173554,-0.141999,-0.110443,-0.078888,-0.047333,-0.015777,0.015778,0.047333,0.078889,0.110444,0.142000,0.173555,0.205110,0.236666,0.268221,0.299776,0.331332,0.362887,0.394442,0.425998,0.457553,0.489109,0.520664,0.552219,0.583775,0.615330,0.646885,0.678441,0.709996,0.741552,0.773107,0.804662,0.836218,0.867773,0.899328,0.930884,0.962439,0.993995,1.025550,1.057105,1.088661,1.120216,1.151771,1.183327,1.214882,1.246437,1.277993,1.309548,1.341104,1.372659,1.404214,1.435770,1.467325,1.498880,1.530436,1.561991,1.593547,1.625102,1.656657,1.688213,1.719768,1.751323,1.782879,1.814434,1.845989,1.877545,1.909100,1.940656,1.972211,2.003766,2.035322,2.066877,2.098433,2.129988,2.161543,2.193099,2.224654,2.256209,2.287765,2.319320,2.350875,2.382431,2.413986,2.445542,2.477097,2.508652,2.540208,2.571763,2.603318,2.634874,2.666429,2.697984,2.729540,2.761095,2.792651,2.824206,2.855761,2.887317,2.918872,2.950428,2.981983,3.013538,3.045094,3.076649,3.108204,3.139760,3.171315,3.202870,3.234426,3.265981,3.297536,3.329092,3.360647,3.392203,3.423758,3.455313,3.486869,3.518424,3.549979,3.581535,3.613090,3.644645,3.676201,3.707756,3.739312,3.770867,3.802423,3.833978,3.865533,3.897089,3.928644,3.960199,3.991755
	};
	const qlstm_f32_t mt_weights_2[Act_N_63] = {
			-1.000544,-0.968781,-0.937017,-0.905254,-0.873491,-0.841727,-0.809964,-0.778201,-0.746437,-0.714674,-0.682911,-0.651148,-0.619384,-0.587621,-0.555858,-0.524094,-0.492331,-0.460568,-0.428804,-0.397041,-0.365278,-0.333515,-0.301751,-0.269988,-0.238225,-0.206461,-0.174698,-0.142935,-0.111172,-0.079408,-0.047645,-0.015882,0.015882,0.047645,0.079408,0.111172,0.142935,0.174698,0.206461,0.238225,0.269988,0.301751,0.333515,0.365278,0.397041,0.428805,0.460568,0.492331,0.524094,0.555858,0.587621,0.619384,0.651148,0.682911,0.714674,0.746437,0.778201,0.809964,0.841727,0.873491,0.905254,0.937017,0.968781
	};

	const qlstm_int32_t mt_weights_3[Out_N][Act_N_62] = {
			{-18261,-17743,-17226,-16708,-16190,-15672,-15154,-14636,-14118,-13600,-13082,-12564,-12046,-11528,-11010,-10492,-9975,-9457,-8939,-8421,-7903,-7385,-6867,-6349,-5831,-5313,-4795,-4277,-3759,-3242,-2724,-2206,-1688,-1170,-652,-134,384,902,1420,1938,2456,2974,3492,4009,4527,5045,5563,6081,6599,7117,7635,8153,8671,9189,9707,10225,10742,11260,11778,12296,12814,13332},
			{-19032,-18514,-17997,-17479,-16961,-16443,-15925,-15407,-14889,-14371,-13853,-13335,-12817,-12299,-11781,-11263,-10746,-10228,-9710,-9192,-8674,-8156,-7638,-7120,-6602,-6084,-5566,-5048,-4530,-4013,-3495,-2977,-2459,-1941,-1423,-905,-387,131,649,1167,1685,2203,2721,3238,3756,4274,4792,5310,5828,6346,6864,7382,7900,8418,8936,9454,9971,10489,11007,11525,12043,12561},
			{-17614,-17096,-16579,-16061,-15543,-15025,-14507,-13989,-13471,-12953,-12435,-11917,-11399,-10881,-10363,-9846,-9328,-8810,-8292,-7774,-7256,-6738,-6220,-5702,-5184,-4666,-4148,-3630,-3112,-2595,-2077,-1559,-1041,-523,-5,513,1031,1549,2067,2585,3103,3621,4138,4656,5174,5692,6210,6728,7246,7764,8282,8800,9318,9836,10354,10872,11389,11907,12425,12943,13461,13979},
			{-17996,-17478,-16961,-16443,-15925,-15407,-14889,-14371,-13853,-13335,-12817,-12299,-11781,-11263,-10745,-10227,-9710,-9192,-8674,-8156,-7638,-7120,-6602,-6084,-5566,-5048,-4530,-4012,-3494,-2977,-2459,-1941,-1423,-905,-387,131,649,1167,1685,2203,2721,3239,3757,4274,4792,5310,5828,6346,6864,7382,7900,8418,8936,9454,9972,10490,11007,11525,12043,12561,13079,13597},
			{-17115,-16597,-16079,-15561,-15043,-14525,-14007,-13489,-12971,-12454,-11936,-11418,-10900,-10382,-9864,-9346,-8828,-8310,-7792,-7274,-6756,-6238,-5721,-5203,-4685,-4167,-3649,-3131,-2613,-2095,-1577,-1059,-541,-23,495,1012,1530,2048,2566,3084,3602,4120,4638,5156,5674,6192,6710,7228,7746,8263,8781,9299,9817,10335,10853,11371,11889,12407,12925,13443,13961,14479},
			{-17316,-16798,-16280,-15762,-15244,-14726,-14209,-13691,-13173,-12655,-12137,-11619,-11101,-10583,-10065,-9547,-9029,-8511,-7993,-7476,-6958,-6440,-5922,-5404,-4886,-4368,-3850,-3332,-2814,-2296,-1778,-1260,-742,-225,293,811,1329,1847,2365,2883,3401,3919,4437,4955,5473,5991,6508,7026,7544,8062,8580,9098,9616,10134,10652,11170,11688,12206,12724,13241,13759,14277},
			{-15862,-15344,-14826,-14308,-13790,-13272,-12754,-12236,-11718,-11200,-10682,-10165,-9647,-9129,-8611,-8093,-7575,-7057,-6539,-6021,-5503,-4985,-4467,-3949,-3432,-2914,-2396,-1878,-1360,-842,-324,194,712,1230,1748,2266,2784,3302,3819,4337,4855,5373,5891,6409,6927,7445,7963,8481,8999,9517,10035,10552,11070,11588,12106,12624,13142,13660,14178,14696,15214,15732},
			{-17721,-17203,-16685,-16167,-15649,-15131,-14613,-14095,-13577,-13060,-12542,-12024,-11506,-10988,-10470,-9952,-9434,-8916,-8398,-7880,-7362,-6844,-6327,-5809,-5291,-4773,-4255,-3737,-3219,-2701,-2183,-1665,-1147,-629,-111,406,924,1442,1960,2478,2996,3514,4032,4550,5068,5586,6104,6622,7140,7657,8175,8693,9211,9729,10247,10765,11283,11801,12319,12837,13355,13873},
			{-17972,-17455,-16937,-16419,-15901,-15383,-14865,-14347,-13829,-13311,-12793,-12275,-11757,-11239,-10722,-10204,-9686,-9168,-8650,-8132,-7614,-7096,-6578,-6060,-5542,-5024,-4506,-3988,-3471,-2953,-2435,-1917,-1399,-881,-363,155,673,1191,1709,2227,2745,3262,3780,4298,4816,5334,5852,6370,6888,7406,7924,8442,8960,9478,9996,10513,11031,11549,12067,12585,13103,13621},
			{-15697,-15179,-14661,-14143,-13626,-13108,-12590,-12072,-11554,-11036,-10518,-10000,-9482,-8964,-8446,-7928,-7410,-6893,-6375,-5857,-5339,-4821,-4303,-3785,-3267,-2749,-2231,-1713,-1195,-677,-159,358,876,1394,1912,2430,2948,3466,3984,4502,5020,5538,6056,6574,7091,7609,8127,8645,9163,9681,10199,10717,11235,11753,12271,12789,13307,13825,14342,14860,15378,15896},
			{-15230,-14712,-14194,-13676,-13158,-12640,-12122,-11604,-11087,-10569,-10051,-9533,-9015,-8497,-7979,-7461,-6943,-6425,-5907,-5389,-4871,-4354,-3836,-3318,-2800,-2282,-1764,-1246,-728,-210,308,826,1344,1862,2379,2897,3415,3933,4451,4969,5487,6005,6523,7041,7559,8077,8595,9113,9630,10148,10666,11184,11702,12220,12738,13256,13774,14292,14810,15328,15846,16363},
			{-16911,-16393,-15875,-15357,-14839,-14321,-13803,-13286,-12768,-12250,-11732,-11214,-10696,-10178,-9660,-9142,-8624,-8106,-7588,-7070,-6553,-6035,-5517,-4999,-4481,-3963,-3445,-2927,-2409,-1891,-1373,-855,-337,181,698,1216,1734,2252,2770,3288,3806,4324,4842,5360,5878,6396,6914,7431,7949,8467,8985,9503,10021,10539,11057,11575,12093,12611,13129,13647,14164,14682},
			{-14477,-13959,-13441,-12923,-12405,-11887,-11369,-10851,-10333,-9815,-9297,-8779,-8261,-7743,-7226,-6708,-6190,-5672,-5154,-4636,-4118,-3600,-3082,-2564,-2046,-1528,-1010,-493,25,543,1061,1579,2097,2615,3133,3651,4169,4687,5205,5723,6241,6758,7276,7794,8312,8830,9348,9866,10384,10902,11420,11938,12456,12974,13491,14009,14527,15045,15563,16081,16599,17117},
			{-15210,-14692,-14174,-13657,-13139,-12621,-12103,-11585,-11067,-10549,-10031,-9513,-8995,-8477,-7959,-7441,-6923,-6406,-5888,-5370,-4852,-4334,-3816,-3298,-2780,-2262,-1744,-1226,-708,-190,327,845,1363,1881,2399,2917,3435,3953,4471,4989,5507,6025,6543,7061,7578,8096,8614,9132,9650,10168,10686,11204,11722,12240,12758,13276,13794,14311,14829,15347,15865,16383},
			{-17437,-16919,-16401,-15883,-15366,-14848,-14330,-13812,-13294,-12776,-12258,-11740,-11222,-10704,-10186,-9668,-9150,-8633,-8115,-7597,-7079,-6561,-6043,-5525,-5007,-4489,-3971,-3453,-2935,-2417,-1899,-1382,-864,-346,172,690,1208,1726,2244,2762,3280,3798,4316,4834,5351,5869,6387,6905,7423,7941,8459,8977,9495,10013,10531,11049,11567,12085,12602,13120,13638,14156},
			{-15537,-15019,-14501,-13983,-13465,-12947,-12429,-11911,-11393,-10875,-10357,-9839,-9322,-8804,-8286,-7768,-7250,-6732,-6214,-5696,-5178,-4660,-4142,-3624,-3106,-2589,-2071,-1553,-1035,-517,1,519,1037,1555,2073,2591,3109,3627,4145,4662,5180,5698,6216,6734,7252,7770,8288,8806,9324,9842,10360,10878,11395,11913,12431,12949,13467,13985,14503,15021,15539,16057},
			{-17980,-17463,-16945,-16427,-15909,-15391,-14873,-14355,-13837,-13319,-12801,-12283,-11765,-11247,-10730,-10212,-9694,-9176,-8658,-8140,-7622,-7104,-6586,-6068,-5550,-5032,-4514,-3996,-3479,-2961,-2443,-1925,-1407,-889,-371,147,665,1183,1701,2219,2737,3254,3772,4290,4808,5326,5844,6362,6880,7398,7916,8434,8952,9470,9988,10505,11023,11541,12059,12577,13095,13613},
			{-17031,-16514,-15996,-15478,-14960,-14442,-13924,-13406,-12888,-12370,-11852,-11334,-10816,-10298,-9780,-9263,-8745,-8227,-7709,-7191,-6673,-6155,-5637,-5119,-4601,-4083,-3565,-3047,-2530,-2012,-1494,-976,-458,60,578,1096,1614,2132,2650,3168,3686,4203,4721,5239,5757,6275,6793,7311,7829,8347,8865,9383,9901,10419,10937,11454,11972,12490,13008,13526,14044,14562},
			{-15536,-15018,-14500,-13983,-13465,-12947,-12429,-11911,-11393,-10875,-10357,-9839,-9321,-8803,-8285,-7767,-7250,-6732,-6214,-5696,-5178,-4660,-4142,-3624,-3106,-2588,-2070,-1552,-1034,-516,1,519,1037,1555,2073,2591,3109,3627,4145,4663,5181,5699,6217,6734,7252,7770,8288,8806,9324,9842,10360,10878,11396,11914,12432,12950,13468,13985,14503,15021,15539,16057},
			{-16681,-16163,-15646,-15128,-14610,-14092,-13574,-13056,-12538,-12020,-11502,-10984,-10466,-9948,-9430,-8912,-8395,-7877,-7359,-6841,-6323,-5805,-5287,-4769,-4251,-3733,-3215,-2697,-2179,-1662,-1144,-626,-108,410,928,1446,1964,2482,3000,3518,4036,4554,5072,5589,6107,6625,7143,7661,8179,8697,9215,9733,10251,10769,11287,11805,12322,12840,13358,13876,14394,14912}
	};
	const qlstm_int32_t mt_weights_4[Out_N][Act_N_62] = {
			{-13788,-13333,-12877,-12422,-11967,-11511,-11056,-10601,-10145,-9690,-9235,-8779,-8324,-7869,-7413,-6958,-6503,-6047,-5592,-5137,-4681,-4226,-3771,-3315,-2860,-2405,-1949,-1494,-1039,-583,-128,327,783,1238,1693,2149,2604,3059,3515,3970,4425,4881,5336,5791,6247,6702,7157,7613,8068,8523,8979,9434,9889,10345,10800,11255,11711,12166,12621,13077,13532,13987},
			{-14475,-14019,-13564,-13109,-12653,-12198,-11743,-11287,-10832,-10377,-9921,-9466,-9011,-8555,-8100,-7645,-7189,-6734,-6279,-5823,-5368,-4913,-4457,-4002,-3547,-3091,-2636,-2181,-1725,-1270,-815,-359,96,551,1007,1462,1917,2373,2828,3283,3739,4194,4649,5105,5560,6015,6471,6926,7381,7837,8292,8747,9203,9658,10113,10569,11024,11479,11935,12390,12845,13301},
			{-14005,-13550,-13095,-12639,-12184,-11729,-11273,-10818,-10363,-9907,-9452,-8997,-8541,-8086,-7631,-7175,-6720,-6265,-5809,-5354,-4899,-4443,-3988,-3533,-3077,-2622,-2167,-1711,-1256,-801,-345,110,565,1021,1476,1931,2387,2842,3297,3753,4208,4663,5119,5574,6029,6485,6940,7395,7851,8306,8761,9217,9672,10127,10583,11038,11493,11949,12404,12859,13315,13770},
			{-14129,-13673,-13218,-12763,-12307,-11852,-11397,-10941,-10486,-10031,-9575,-9120,-8665,-8209,-7754,-7299,-6843,-6388,-5933,-5477,-5022,-4567,-4111,-3656,-3201,-2745,-2290,-1835,-1379,-924,-469,-13,442,897,1353,1808,2263,2719,3174,3629,4085,4540,4995,5451,5906,6361,6817,7272,7727,8183,8638,9093,9549,10004,10459,10915,11370,11825,12281,12736,13191,13647},
			{-13909,-13454,-12999,-12543,-12088,-11633,-11177,-10722,-10267,-9811,-9356,-8901,-8445,-7990,-7535,-7079,-6624,-6169,-5713,-5258,-4803,-4347,-3892,-3437,-2981,-2526,-2071,-1615,-1160,-705,-249,206,661,1117,1572,2027,2483,2938,3393,3849,4304,4759,5215,5670,6125,6581,7036,7491,7947,8402,8857,9313,9768,10223,10679,11134,11589,12045,12500,12955,13411,13866},
			{-14216,-13761,-13305,-12850,-12395,-11939,-11484,-11029,-10573,-10118,-9663,-9207,-8752,-8297,-7841,-7386,-6931,-6475,-6020,-5565,-5109,-4654,-4199,-3743,-3288,-2833,-2377,-1922,-1467,-1011,-556,-101,355,810,1265,1721,2176,2631,3087,3542,3997,4453,4908,5363,5819,6274,6729,7185,7640,8095,8551,9006,9461,9917,10372,10827,11283,11738,12193,12649,13104,13559},
			{-13986,-13531,-13076,-12620,-12165,-11710,-11254,-10799,-10344,-9888,-9433,-8978,-8522,-8067,-7612,-7156,-6701,-6246,-5790,-5335,-4880,-4424,-3969,-3514,-3058,-2603,-2148,-1692,-1237,-782,-326,129,584,1040,1495,1950,2406,2861,3316,3772,4227,4682,5138,5593,6048,6504,6959,7414,7870,8325,8780,9236,9691,10146,10602,11057,11512,11968,12423,12878,13334,13789},
			{-14240,-13784,-13329,-12874,-12418,-11963,-11508,-11052,-10597,-10142,-9686,-9231,-8776,-8320,-7865,-7410,-6954,-6499,-6044,-5588,-5133,-4678,-4222,-3767,-3312,-2856,-2401,-1946,-1490,-1035,-580,-124,331,786,1242,1697,2152,2608,3063,3518,3974,4429,4884,5340,5795,6250,6706,7161,7616,8072,8527,8982,9438,9893,10348,10804,11259,11714,12170,12625,13080,13536},
			{-13376,-12921,-12466,-12010,-11555,-11100,-10644,-10189,-9734,-9278,-8823,-8368,-7912,-7457,-7002,-6546,-6091,-5636,-5180,-4725,-4270,-3814,-3359,-2904,-2448,-1993,-1538,-1082,-627,-172,284,739,1194,1650,2105,2560,3016,3471,3926,4382,4837,5292,5748,6203,6658,7114,7569,8024,8480,8935,9390,9846,10301,10756,11212,11667,12122,12578,13033,13488,13944,14399},
			{-15029,-14574,-14119,-13663,-13208,-12753,-12297,-11842,-11387,-10931,-10476,-10021,-9565,-9110,-8655,-8199,-7744,-7289,-6833,-6378,-5923,-5467,-5012,-4557,-4101,-3646,-3191,-2735,-2280,-1825,-1369,-914,-459,-3,452,907,1363,1818,2273,2729,3184,3639,4095,4550,5005,5461,5916,6371,6827,7282,7737,8193,8648,9103,9559,10014,10469,10925,11380,11835,12291,12746},
			{-13945,-13490,-13035,-12579,-12124,-11669,-11213,-10758,-10303,-9847,-9392,-8937,-8481,-8026,-7571,-7115,-6660,-6205,-5749,-5294,-4839,-4383,-3928,-3473,-3017,-2562,-2107,-1651,-1196,-741,-285,170,625,1081,1536,1991,2447,2902,3357,3813,4268,4723,5179,5634,6089,6545,7000,7455,7911,8366,8821,9277,9732,10187,10643,11098,11553,12009,12464,12919,13375,13830},
			{-14385,-13930,-13474,-13019,-12564,-12108,-11653,-11198,-10742,-10287,-9832,-9376,-8921,-8466,-8010,-7555,-7100,-6644,-6189,-5734,-5278,-4823,-4368,-3912,-3457,-3002,-2546,-2091,-1636,-1180,-725,-270,186,641,1096,1552,2007,2462,2918,3373,3828,4284,4739,5194,5650,6105,6560,7016,7471,7926,8382,8837,9292,9748,10203,10658,11114,11569,12024,12480,12935,13390},
			{-13947,-13491,-13036,-12581,-12125,-11670,-11215,-10759,-10304,-9849,-9393,-8938,-8483,-8027,-7572,-7117,-6661,-6206,-5751,-5295,-4840,-4385,-3929,-3474,-3019,-2563,-2108,-1653,-1197,-742,-287,169,624,1079,1535,1990,2445,2901,3356,3811,4267,4722,5177,5633,6088,6543,6999,7454,7909,8365,8820,9275,9731,10186,10641,11097,11552,12007,12462,12918,13373,13828},
			{-14424,-13969,-13514,-13058,-12603,-12148,-11692,-11237,-10782,-10326,-9871,-9416,-8960,-8505,-8050,-7594,-7139,-6684,-6228,-5773,-5318,-4862,-4407,-3952,-3496,-3041,-2586,-2130,-1675,-1220,-764,-309,146,602,1057,1512,1968,2423,2878,3334,3789,4244,4700,5155,5610,6066,6521,6976,7432,7887,8342,8798,9253,9708,10164,10619,11074,11530,11985,12440,12896,13351},
			{-14145,-13689,-13234,-12779,-12323,-11868,-11413,-10957,-10502,-10047,-9591,-9136,-8681,-8225,-7770,-7315,-6859,-6404,-5949,-5493,-5038,-4583,-4127,-3672,-3217,-2761,-2306,-1851,-1395,-940,-485,-29,426,881,1337,1792,2247,2703,3158,3613,4069,4524,4979,5435,5890,6345,6801,7256,7711,8167,8622,9077,9533,9988,10443,10899,11354,11809,12265,12720,13175,13631},
			{-12998,-12542,-12087,-11632,-11176,-10721,-10266,-9810,-9355,-8900,-8444,-7989,-7534,-7078,-6623,-6168,-5712,-5257,-4802,-4346,-3891,-3436,-2980,-2525,-2070,-1614,-1159,-704,-248,207,662,1118,1573,2028,2484,2939,3394,3850,4305,4760,5216,5671,6126,6582,7037,7492,7948,8403,8858,9314,9769,10224,10680,11135,11590,12046,12501,12956,13412,13867,14322,14778},
			{-13283,-12828,-12372,-11917,-11462,-11006,-10551,-10096,-9640,-9185,-8730,-8274,-7819,-7364,-6908,-6453,-5998,-5542,-5087,-4632,-4176,-3721,-3266,-2810,-2355,-1900,-1444,-989,-534,-78,377,832,1288,1743,2198,2654,3109,3564,4020,4475,4930,5386,5841,6296,6752,7207,7662,8118,8573,9028,9484,9939,10394,10850,11305,11760,12216,12671,13126,13582,14037,14492},
			{-13985,-13529,-13074,-12619,-12163,-11708,-11253,-10797,-10342,-9887,-9431,-8976,-8521,-8065,-7610,-7155,-6699,-6244,-5789,-5333,-4878,-4423,-3967,-3512,-3057,-2601,-2146,-1691,-1235,-780,-325,131,586,1041,1497,1952,2407,2863,3318,3773,4229,4684,5139,5595,6050,6505,6961,7416,7871,8327,8782,9237,9693,10148,10603,11059,11514,11969,12425,12880,13335,13791},
			{-14119,-13664,-13208,-12753,-12298,-11842,-11387,-10932,-10476,-10021,-9566,-9110,-8655,-8200,-7744,-7289,-6834,-6378,-5923,-5468,-5012,-4557,-4102,-3646,-3191,-2736,-2280,-1825,-1370,-914,-459,-4,452,907,1362,1818,2273,2728,3184,3639,4094,4550,5005,5460,5916,6371,6826,7282,7737,8192,8648,9103,9558,10014,10469,10924,11380,11835,12290,12746,13201,13656},
			{-14314,-13859,-13403,-12948,-12493,-12037,-11582,-11127,-10671,-10216,-9761,-9305,-8850,-8395,-7939,-7484,-7029,-6573,-6118,-5663,-5207,-4752,-4297,-3841,-3386,-2931,-2475,-2020,-1565,-1109,-654,-199,257,712,1167,1623,2078,2533,2989,3444,3899,4355,4810,5265,5721,6176,6631,7087,7542,7997,8453,8908,9363,9819,10274,10729,11185,11640,12095,12551,13006,13461}
	};
	const qlstm_int32_t mt_weights_5[Out_N][Act_N_62] = {
			{-21619,-20931,-20243,-19555,-18867,-18179,-17491,-16804,-16116,-15428,-14740,-14052,-13364,-12676,-11988,-11300,-10612,-9924,-9236,-8548,-7860,-7172,-6484,-5797,-5109,-4421,-3733,-3045,-2357,-1669,-981,-293,395,1083,1771,2459,3147,3835,4523,5211,5898,6586,7274,7962,8650,9338,10026,10714,11402,12090,12778,13466,14154,14842,15530,16218,16906,17593,18281,18969,19657,20345},
			{-21773,-21085,-20397,-19709,-19021,-18333,-17645,-16957,-16270,-15582,-14894,-14206,-13518,-12830,-12142,-11454,-10766,-10078,-9390,-8702,-8014,-7326,-6638,-5950,-5262,-4575,-3887,-3199,-2511,-1823,-1135,-447,241,929,1617,2305,2993,3681,4369,5057,5745,6433,7120,7808,8496,9184,9872,10560,11248,11936,12624,13312,14000,14688,15376,16064,16752,17440,18127,18815,19503,20191},
			{-22759,-22071,-21383,-20695,-20007,-19319,-18631,-17943,-17255,-16567,-15879,-15191,-14503,-13815,-13127,-12439,-11751,-11064,-10376,-9688,-9000,-8312,-7624,-6936,-6248,-5560,-4872,-4184,-3496,-2808,-2120,-1432,-744,-56,631,1319,2007,2695,3383,4071,4759,5447,6135,6823,7511,8199,8887,9575,10263,10951,11639,12326,13014,13702,14390,15078,15766,16454,17142,17830,18518,19206},
			{-22647,-21959,-21271,-20583,-19895,-19208,-18520,-17832,-17144,-16456,-15768,-15080,-14392,-13704,-13016,-12328,-11640,-10952,-10264,-9576,-8888,-8200,-7513,-6825,-6137,-5449,-4761,-4073,-3385,-2697,-2009,-1321,-633,55,743,1431,2119,2807,3495,4182,4870,5558,6246,6934,7622,8310,8998,9686,10374,11062,11750,12438,13126,13814,14502,15190,15877,16565,17253,17941,18629,19317},
			{-23713,-23025,-22337,-21649,-20961,-20273,-19585,-18897,-18210,-17522,-16834,-16146,-15458,-14770,-14082,-13394,-12706,-12018,-11330,-10642,-9954,-9266,-8578,-7890,-7202,-6515,-5827,-5139,-4451,-3763,-3075,-2387,-1699,-1011,-323,365,1053,1741,2429,3117,3805,4493,5180,5868,6556,7244,7932,8620,9308,9996,10684,11372,12060,12748,13436,14124,14812,15500,16188,16875,17563,18251},
			{-22066,-21378,-20690,-20002,-19314,-18626,-17938,-17250,-16562,-15874,-15186,-14498,-13810,-13122,-12434,-11747,-11059,-10371,-9683,-8995,-8307,-7619,-6931,-6243,-5555,-4867,-4179,-3491,-2803,-2115,-1427,-739,-52,636,1324,2012,2700,3388,4076,4764,5452,6140,6828,7516,8204,8892,9580,10268,10956,11643,12331,13019,13707,14395,15083,15771,16459,17147,17835,18523,19211,19899},
			{-21852,-21164,-20476,-19788,-19100,-18412,-17724,-17036,-16348,-15660,-14972,-14284,-13596,-12908,-12220,-11532,-10845,-10157,-9469,-8781,-8093,-7405,-6717,-6029,-5341,-4653,-3965,-3277,-2589,-1901,-1213,-525,163,850,1538,2226,2914,3602,4290,4978,5666,6354,7042,7730,8418,9106,9794,10482,11170,11858,12545,13233,13921,14609,15297,15985,16673,17361,18049,18737,19425,20113},
			{-20932,-20244,-19556,-18868,-18180,-17492,-16804,-16116,-15428,-14740,-14052,-13364,-12676,-11988,-11300,-10612,-9925,-9237,-8549,-7861,-7173,-6485,-5797,-5109,-4421,-3733,-3045,-2357,-1669,-981,-293,395,1083,1770,2458,3146,3834,4522,5210,5898,6586,7274,7962,8650,9338,10026,10714,11402,12090,12778,13465,14153,14841,15529,16217,16905,17593,18281,18969,19657,20345,21033},
			{-22092,-21404,-20716,-20028,-19340,-18653,-17965,-17277,-16589,-15901,-15213,-14525,-13837,-13149,-12461,-11773,-11085,-10397,-9709,-9021,-8333,-7645,-6958,-6270,-5582,-4894,-4206,-3518,-2830,-2142,-1454,-766,-78,610,1298,1986,2674,3362,4050,4737,5425,6113,6801,7489,8177,8865,9553,10241,10929,11617,12305,12993,13681,14369,15057,15745,16432,17120,17808,18496,19184,19872},
			{-21212,-20524,-19836,-19149,-18461,-17773,-17085,-16397,-15709,-15021,-14333,-13645,-12957,-12269,-11581,-10893,-10205,-9517,-8829,-8141,-7454,-6766,-6078,-5390,-4702,-4014,-3326,-2638,-1950,-1262,-574,114,802,1490,2178,2866,3554,4241,4929,5617,6305,6993,7681,8369,9057,9745,10433,11121,11809,12497,13185,13873,14561,15249,15936,16624,17312,18000,18688,19376,20064,20752},
			{-22808,-22120,-21432,-20744,-20056,-19368,-18680,-17992,-17304,-16616,-15928,-15240,-14552,-13864,-13177,-12489,-11801,-11113,-10425,-9737,-9049,-8361,-7673,-6985,-6297,-5609,-4921,-4233,-3545,-2857,-2169,-1482,-794,-106,582,1270,1958,2646,3334,4022,4710,5398,6086,6774,7462,8150,8838,9526,10213,10901,11589,12277,12965,13653,14341,15029,15717,16405,17093,17781,18469,19157},
			{-20059,-19372,-18684,-17996,-17308,-16620,-15932,-15244,-14556,-13868,-13180,-12492,-11804,-11116,-10428,-9740,-9052,-8364,-7677,-6989,-6301,-5613,-4925,-4237,-3549,-2861,-2173,-1485,-797,-109,579,1267,1955,2643,3331,4018,4706,5394,6082,6770,7458,8146,8834,9522,10210,10898,11586,12274,12962,13650,14338,15025,15713,16401,17089,17777,18465,19153,19841,20529,21217,21905},
			{-21652,-20964,-20276,-19588,-18900,-18212,-17524,-16836,-16148,-15460,-14772,-14084,-13396,-12708,-12020,-11332,-10644,-9957,-9269,-8581,-7893,-7205,-6517,-5829,-5141,-4453,-3765,-3077,-2389,-1701,-1013,-325,363,1051,1738,2426,3114,3802,4490,5178,5866,6554,7242,7930,8618,9306,9994,10682,11370,12058,12746,13433,14121,14809,15497,16185,16873,17561,18249,18937,19625,20313},
			{-20855,-20167,-19480,-18792,-18104,-17416,-16728,-16040,-15352,-14664,-13976,-13288,-12600,-11912,-11224,-10536,-9848,-9160,-8472,-7785,-7097,-6409,-5721,-5033,-4345,-3657,-2969,-2281,-1593,-905,-217,471,1159,1847,2535,3223,3910,4598,5286,5974,6662,7350,8038,8726,9414,10102,10790,11478,12166,12854,13542,14230,14918,15605,16293,16981,17669,18357,19045,19733,20421,21109},
			{-23464,-22776,-22088,-21400,-20712,-20024,-19336,-18648,-17960,-17272,-16584,-15896,-15208,-14520,-13832,-13145,-12457,-11769,-11081,-10393,-9705,-9017,-8329,-7641,-6953,-6265,-5577,-4889,-4201,-3513,-2825,-2137,-1450,-762,-74,614,1302,1990,2678,3366,4054,4742,5430,6118,6806,7494,8182,8870,9558,10245,10933,11621,12309,12997,13685,14373,15061,15749,16437,17125,17813,18501},
			{-19320,-18632,-17944,-17256,-16568,-15880,-15192,-14504,-13816,-13128,-12441,-11753,-11065,-10377,-9689,-9001,-8313,-7625,-6937,-6249,-5561,-4873,-4185,-3497,-2809,-2121,-1433,-746,-58,630,1318,2006,2694,3382,4070,4758,5446,6134,6822,7510,8198,8886,9574,10262,10949,11637,12325,13013,13701,14389,15077,15765,16453,17141,17829,18517,19205,19893,20581,21269,21957,22644},
			{-22395,-21707,-21019,-20331,-19644,-18956,-18268,-17580,-16892,-16204,-15516,-14828,-14140,-13452,-12764,-12076,-11388,-10700,-10012,-9324,-8636,-7949,-7261,-6573,-5885,-5197,-4509,-3821,-3133,-2445,-1757,-1069,-381,307,995,1683,2371,3059,3746,4434,5122,5810,6498,7186,7874,8562,9250,9938,10626,11314,12002,12690,13378,14066,14754,15441,16129,16817,17505,18193,18881,19569},
			{-21637,-20949,-20261,-19573,-18885,-18197,-17509,-16821,-16133,-15445,-14757,-14070,-13382,-12694,-12006,-11318,-10630,-9942,-9254,-8566,-7878,-7190,-6502,-5814,-5126,-4438,-3750,-3062,-2375,-1687,-999,-311,377,1065,1753,2441,3129,3817,4505,5193,5881,6569,7257,7945,8633,9320,10008,10696,11384,12072,12760,13448,14136,14824,15512,16200,16888,17576,18264,18952,19640,20328},
			{-22265,-21577,-20889,-20201,-19513,-18825,-18137,-17449,-16761,-16073,-15385,-14697,-14009,-13321,-12633,-11945,-11257,-10570,-9882,-9194,-8506,-7818,-7130,-6442,-5754,-5066,-4378,-3690,-3002,-2314,-1626,-938,-250,438,1125,1813,2501,3189,3877,4565,5253,5941,6629,7317,8005,8693,9381,10069,10757,11445,12132,12820,13508,14196,14884,15572,16260,16948,17636,18324,19012,19700},
			{-21773,-21085,-20397,-19709,-19021,-18334,-17646,-16958,-16270,-15582,-14894,-14206,-13518,-12830,-12142,-11454,-10766,-10078,-9390,-8702,-8014,-7326,-6639,-5951,-5263,-4575,-3887,-3199,-2511,-1823,-1135,-447,241,929,1617,2305,2993,3681,4369,5056,5744,6432,7120,7808,8496,9184,9872,10560,11248,11936,12624,13312,14000,14688,15376,16064,16751,17439,18127,18815,19503,20191}
	};
	const qlstm_int32_t mt_weights_6[Out_N][Act_N_62] = {
			{-14869,-14429,-13989,-13549,-13109,-12669,-12229,-11789,-11349,-10909,-10470,-10030,-9590,-9150,-8710,-8270,-7830,-7390,-6950,-6510,-6070,-5630,-5190,-4750,-4311,-3871,-3431,-2991,-2551,-2111,-1671,-1231,-791,-351,89,529,969,1408,1848,2288,2728,3168,3608,4048,4488,4928,5368,5808,6248,6688,7128,7567,8007,8447,8887,9327,9767,10207,10647,11087,11527,11967},
			{-13060,-12620,-12180,-11740,-11300,-10861,-10421,-9981,-9541,-9101,-8661,-8221,-7781,-7341,-6901,-6461,-6021,-5581,-5141,-4702,-4262,-3822,-3382,-2942,-2502,-2062,-1622,-1182,-742,-302,138,578,1017,1457,1897,2337,2777,3217,3657,4097,4537,4977,5417,5857,6297,6737,7176,7616,8056,8496,8936,9376,9816,10256,10696,11136,11576,12016,12456,12896,13335,13775},
			{-12259,-11819,-11379,-10939,-10499,-10059,-9619,-9179,-8739,-8300,-7860,-7420,-6980,-6540,-6100,-5660,-5220,-4780,-4340,-3900,-3460,-3020,-2580,-2141,-1701,-1261,-821,-381,59,499,939,1379,1819,2259,2699,3139,3578,4018,4458,4898,5338,5778,6218,6658,7098,7538,7978,8418,8858,9298,9737,10177,10617,11057,11497,11937,12377,12817,13257,13697,14137,14577},
			{-13794,-13354,-12914,-12474,-12034,-11594,-11154,-10715,-10275,-9835,-9395,-8955,-8515,-8075,-7635,-7195,-6755,-6315,-5875,-5435,-4995,-4556,-4116,-3676,-3236,-2796,-2356,-1916,-1476,-1036,-596,-156,284,724,1163,1603,2043,2483,2923,3363,3803,4243,4683,5123,5563,6003,6443,6883,7322,7762,8202,8642,9082,9522,9962,10402,10842,11282,11722,12162,12602,13041},
			{-14088,-13648,-13208,-12768,-12328,-11888,-11448,-11008,-10568,-10128,-9689,-9249,-8809,-8369,-7929,-7489,-7049,-6609,-6169,-5729,-5289,-4849,-4409,-3969,-3530,-3090,-2650,-2210,-1770,-1330,-890,-450,-10,430,870,1310,1750,2189,2629,3069,3509,3949,4389,4829,5269,5709,6149,6589,7029,7469,7909,8348,8788,9228,9668,10108,10548,10988,11428,11868,12308,12748},
			{-12812,-12372,-11932,-11492,-11052,-10612,-10172,-9732,-9293,-8853,-8413,-7973,-7533,-7093,-6653,-6213,-5773,-5333,-4893,-4453,-4013,-3573,-3134,-2694,-2254,-1814,-1374,-934,-494,-54,386,826,1266,1706,2146,2585,3025,3465,3905,4345,4785,5225,5665,6105,6545,6985,7425,7865,8305,8744,9184,9624,10064,10504,10944,11384,11824,12264,12704,13144,13584,14024},
			{-13162,-12722,-12282,-11842,-11402,-10962,-10522,-10082,-9642,-9202,-8762,-8322,-7882,-7442,-7003,-6563,-6123,-5683,-5243,-4803,-4363,-3923,-3483,-3043,-2603,-2163,-1723,-1283,-844,-404,36,476,916,1356,1796,2236,2676,3116,3556,3996,4436,4875,5315,5755,6195,6635,7075,7515,7955,8395,8835,9275,9715,10155,10595,11034,11474,11914,12354,12794,13234,13674},
			{-14075,-13635,-13195,-12755,-12315,-11875,-11435,-10995,-10555,-10116,-9676,-9236,-8796,-8356,-7916,-7476,-7036,-6596,-6156,-5716,-5276,-4836,-4396,-3957,-3517,-3077,-2637,-2197,-1757,-1317,-877,-437,3,443,883,1323,1762,2202,2642,3082,3522,3962,4402,4842,5282,5722,6162,6602,7042,7482,7921,8361,8801,9241,9681,10121,10561,11001,11441,11881,12321,12761},
			{-14059,-13619,-13179,-12739,-12299,-11859,-11419,-10979,-10539,-10099,-9660,-9220,-8780,-8340,-7900,-7460,-7020,-6580,-6140,-5700,-5260,-4820,-4380,-3941,-3501,-3061,-2621,-2181,-1741,-1301,-861,-421,19,459,899,1339,1779,2218,2658,3098,3538,3978,4418,4858,5298,5738,6178,6618,7058,7498,7937,8377,8817,9257,9697,10137,10577,11017,11457,11897,12337,12777},
			{-12195,-11755,-11315,-10875,-10436,-9996,-9556,-9116,-8676,-8236,-7796,-7356,-6916,-6476,-6036,-5596,-5156,-4716,-4277,-3837,-3397,-2957,-2517,-2077,-1637,-1197,-757,-317,123,563,1003,1442,1882,2322,2762,3202,3642,4082,4522,4962,5402,5842,6282,6722,7162,7601,8041,8481,8921,9361,9801,10241,10681,11121,11561,12001,12441,12881,13320,13760,14200,14640},
			{-13714,-13274,-12834,-12395,-11955,-11515,-11075,-10635,-10195,-9755,-9315,-8875,-8435,-7995,-7555,-7115,-6675,-6236,-5796,-5356,-4916,-4476,-4036,-3596,-3156,-2716,-2276,-1836,-1396,-956,-517,-77,363,803,1243,1683,2123,2563,3003,3443,3883,4323,4763,5203,5642,6082,6522,6962,7402,7842,8282,8722,9162,9602,10042,10482,10922,11361,11801,12241,12681,13121},
			{-12266,-11826,-11386,-10946,-10506,-10067,-9627,-9187,-8747,-8307,-7867,-7427,-6987,-6547,-6107,-5667,-5227,-4787,-4347,-3908,-3468,-3028,-2588,-2148,-1708,-1268,-828,-388,52,492,932,1372,1811,2251,2691,3131,3571,4011,4451,4891,5331,5771,6211,6651,7091,7531,7970,8410,8850,9290,9730,10170,10610,11050,11490,11930,12370,12810,13250,13690,14129,14569},
			{-12964,-12524,-12084,-11644,-11204,-10765,-10325,-9885,-9445,-9005,-8565,-8125,-7685,-7245,-6805,-6365,-5925,-5485,-5045,-4606,-4166,-3726,-3286,-2846,-2406,-1966,-1526,-1086,-646,-206,234,674,1114,1553,1993,2433,2873,3313,3753,4193,4633,5073,5513,5953,6393,6833,7272,7712,8152,8592,9032,9472,9912,10352,10792,11232,11672,12112,12552,12992,13431,13871},
			{-13041,-12601,-12161,-11721,-11281,-10841,-10401,-9961,-9521,-9081,-8641,-8201,-7761,-7322,-6882,-6442,-6002,-5562,-5122,-4682,-4242,-3802,-3362,-2922,-2482,-2042,-1603,-1163,-723,-283,157,597,1037,1477,1917,2357,2797,3237,3677,4117,4556,4996,5436,5876,6316,6756,7196,7636,8076,8516,8956,9396,9836,10276,10715,11155,11595,12035,12475,12915,13355,13795},
			{-11685,-11245,-10805,-10365,-9925,-9485,-9045,-8605,-8165,-7725,-7285,-6845,-6405,-5966,-5526,-5086,-4646,-4206,-3766,-3326,-2886,-2446,-2006,-1566,-1126,-686,-247,193,633,1073,1513,1953,2393,2833,3273,3713,4153,4593,5033,5473,5912,6352,6792,7232,7672,8112,8552,8992,9432,9872,10312,10752,11192,11631,12071,12511,12951,13391,13831,14271,14711,15151},
			{-13132,-12692,-12252,-11812,-11372,-10933,-10493,-10053,-9613,-9173,-8733,-8293,-7853,-7413,-6973,-6533,-6093,-5653,-5214,-4774,-4334,-3894,-3454,-3014,-2574,-2134,-1694,-1254,-814,-374,66,506,945,1385,1825,2265,2705,3145,3585,4025,4465,4905,5345,5785,6225,6664,7104,7544,7984,8424,8864,9304,9744,10184,10624,11064,11504,11944,12384,12823,13263,13703},
			{-14215,-13775,-13335,-12895,-12455,-12015,-11576,-11136,-10696,-10256,-9816,-9376,-8936,-8496,-8056,-7616,-7176,-6736,-6296,-5856,-5417,-4977,-4537,-4097,-3657,-3217,-2777,-2337,-1897,-1457,-1017,-577,-137,303,742,1182,1622,2062,2502,2942,3382,3822,4262,4702,5142,5582,6022,6461,6901,7341,7781,8221,8661,9101,9541,9981,10421,10861,11301,11741,12181,12620},
			{-13103,-12663,-12223,-11783,-11343,-10904,-10464,-10024,-9584,-9144,-8704,-8264,-7824,-7384,-6944,-6504,-6064,-5624,-5184,-4745,-4305,-3865,-3425,-2985,-2545,-2105,-1665,-1225,-785,-345,95,535,975,1414,1854,2294,2734,3174,3614,4054,4494,4934,5374,5814,6254,6694,7133,7573,8013,8453,8893,9333,9773,10213,10653,11093,11533,11973,12413,12853,13292,13732},
			{-14176,-13736,-13296,-12856,-12416,-11976,-11536,-11096,-10656,-10216,-9776,-9337,-8897,-8457,-8017,-7577,-7137,-6697,-6257,-5817,-5377,-4937,-4497,-4057,-3617,-3178,-2738,-2298,-1858,-1418,-978,-538,-98,342,782,1222,1662,2102,2542,2981,3421,3861,4301,4741,5181,5621,6061,6501,6941,7381,7821,8261,8700,9140,9580,10020,10460,10900,11340,11780,12220,12660},
			{-12629,-12189,-11749,-11309,-10869,-10429,-9989,-9549,-9109,-8669,-8229,-7789,-7349,-6910,-6470,-6030,-5590,-5150,-4710,-4270,-3830,-3390,-2950,-2510,-2070,-1630,-1190,-751,-311,129,569,1009,1449,1889,2329,2769,3209,3649,4089,4529,4968,5408,5848,6288,6728,7168,7608,8048,8488,8928,9368,9808,10248,10688,11127,11567,12007,12447,12887,13327,13767,14207}
	};


	const qlstm_int8_t mt_weights_7[Act_N_63] = {
			-31,-31,-29,-25,-23,-21,-19,-18,-17,-15,-14,-13,-13,-12,-11,-10,-10,-9,-8,-8,-7,-6,-6,-5,-5,-4,-3,-3,-2,-2,-1,-1,0,0,1,2,2,3,3,4,4,5,6,6,7,8,8,9,10,10,11,12,13,14,15,16,17,18,20,21,23,25,28
	};
	const qlstm_int8_t mt_weights_8[Act_N_63] = {
			-21,-17,-15,-14,-13,-12,-11,-10,-9,-8,-8,-7,-7,-6,-6,-5,-5,-4,-4,-4,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,11,12,13,14,15,16,18,22,32
	};
	const qlstm_int8_t mt_weights_9[Act_N_63] = {
			-31,-31,-27,-24,-21,-20,-18,-17,-16,-15,-14,-13,-12,-11,-10,-10,-9,-8,-8,-7,-7,-6,-6,-5,-4,-4,-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,12,12,13,14,15,16,18,19,20,22,24
	};
	const qlstm_int8_t mt_weights_10[Act_N_63] = {
			-31,-31,-27,-24,-22,-20,-19,-17,-16,-15,-14,-13,-13,-12,-11,-10,-10,-9,-9,-8,-7,-7,-6,-6,-5,-5,-4,-4,-3,-3,-2,-2,-1,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,8,8,9,9,10,11,12,12,13,14,15,16,17
	};


	const qlstm_int32_t mt_weights_11[Act_N_62] = {
			-2167,-2096,-2025,-1954,-1883,-1812,-1741,-1670,-1599,-1528,-1456,-1385,-1314,-1243,-1172,-1101,-1030,-959,-888,-817,-746,-675,-604,-533,-461,-390,-319,-248,-177,-106,-35,36,107,178,249,320,391,462,534,605,676,747,818,889,960,1031,1102,1173,1244,1315,1386,1457,1529,1600,1671,1742,1813,1884,1955,2026,2097,2168
	};
	const qlstm_int32_t mt_weights_12[Act_N_62] = {
			-2036,-1969,-1902,-1835,-1769,-1702,-1635,-1568,-1502,-1435,-1368,-1301,-1235,-1168,-1101,-1034,-968,-901,-834,-767,-701,-634,-567,-500,-433,-367,-300,-233,-166,-100,-33,34,101,167,234,301,368,434,501,568,635,702,768,835,902,969,1035,1102,1169,1236,1302,1369,1436,1503,1569,1636,1703,1770,1836,1903,1970,2037
	};
	const qlstm_int32_t mt_weights_13[Act_N_62] = {
			-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31
	};
	const qlstm_int32_t mt_weights_14[Act_N_62] = {
			-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31
	};


	const qlstm_int8_t mt_weights_15[Act_N_63] = {
			-29,-27,-26,-24,-23,-22,-21,-20,-19,-17,-16,-15,-15,-14,-13,-12,-11,-10,-9,-8,-8,-7,-6,-5,-4,-4,-3,-2,-1,-1,0,1,2,2,3,4,5,5,6,7,8,9,9,10,11,12,13,14,15,16,16,17,18,20,21,22,23,24,25,27,28,30,32
	};
	const qlstm_int32_t mt_weights_16[Act_N_255] = {
			-10988,-10902,-10815,-10729,-10643,-10557,-10471,-10385,-10298,-10212,-10126,-10040,-9954,-9867,-9781,-9695,-9609,-9523,-9436,-9350,-9264,-9178,-9092,-9006,-8919,-8833,-8747,-8661,-8575,-8488,-8402,-8316,-8230,-8144,-8058,-7971,-7885,-7799,-7713,-7627,-7540,-7454,-7368,-7282,-7196,-7110,-7023,-6937,-6851,-6765,-6679,-6592,-6506,-6420,-6334,-6248,-6162,-6075,-5989,-5903,-5817,-5731,-5644,-5558,-5472,-5386,-5300,-5214,-5127,-5041,-4955,-4869,-4783,-4696,-4610,-4524,-4438,-4352,-4266,-4179,-4093,-4007,-3921,-3835,-3748,-3662,-3576,-3490,-3404,-3318,-3231,-3145,-3059,-2973,-2887,-2800,-2714,-2628,-2542,-2456,-2370,-2283,-2197,-2111,-2025,-1939,-1852,-1766,-1680,-1594,-1508,-1422,-1335,-1249,-1163,-1077,-991,-904,-818,-732,-646,-560,-474,-387,-301,-215,-129,-43,44,130,216,302,388,475,561,647,733,819,905,992,1078,1164,1250,1336,1423,1509,1595,1681,1767,1853,1940,2026,2112,2198,2284,2371,2457,2543,2629,2715,2801,2888,2974,3060,3146,3232,3319,3405,3491,3577,3663,3749,3836,3922,4008,4094,4180,4267,4353,4439,4525,4611,4697,4784,4870,4956,5042,5128,5215,5301,5387,5473,5559,5645,5732,5818,5904,5990,6076,6163,6249,6335,6421,6507,6593,6680,6766,6852,6938,7024,7111,7197,7283,7369,7455,7541,7628,7714,7800,7886,7972,8059,8145,8231,8317,8403,8489,8576,8662,8748,8834,8920,9007,9093,9179,9265,9351,9438,9524,9610,9696,9782,9868,9955,10041,10127,10213,10299,10386,10472,10558,10644,10730,10816,10903
	};
	const qlstm_int32_t mt_weights_17[Act_N_255] = {
			-10988,-10902,-10815,-10729,-10643,-10557,-10471,-10385,-10298,-10212,-10126,-10040,-9954,-9867,-9781,-9695,-9609,-9523,-9436,-9350,-9264,-9178,-9092,-9006,-8919,-8833,-8747,-8661,-8575,-8488,-8402,-8316,-8230,-8144,-8058,-7971,-7885,-7799,-7713,-7627,-7540,-7454,-7368,-7282,-7196,-7110,-7023,-6937,-6851,-6765,-6679,-6592,-6506,-6420,-6334,-6248,-6162,-6075,-5989,-5903,-5817,-5731,-5644,-5558,-5472,-5386,-5300,-5214,-5127,-5041,-4955,-4869,-4783,-4696,-4610,-4524,-4438,-4352,-4266,-4179,-4093,-4007,-3921,-3835,-3748,-3662,-3576,-3490,-3404,-3318,-3231,-3145,-3059,-2973,-2887,-2800,-2714,-2628,-2542,-2456,-2370,-2283,-2197,-2111,-2025,-1939,-1852,-1766,-1680,-1594,-1508,-1422,-1335,-1249,-1163,-1077,-991,-904,-818,-732,-646,-560,-474,-387,-301,-215,-129,-43,44,130,216,302,388,475,561,647,733,819,905,992,1078,1164,1250,1336,1423,1509,1595,1681,1767,1853,1940,2026,2112,2198,2284,2371,2457,2543,2629,2715,2801,2888,2974,3060,3146,3232,3319,3405,3491,3577,3663,3749,3836,3922,4008,4094,4180,4267,4353,4439,4525,4611,4697,4784,4870,4956,5042,5128,5215,5301,5387,5473,5559,5645,5732,5818,5904,5990,6076,6163,6249,6335,6421,6507,6593,6680,6766,6852,6938,7024,7111,7197,7283,7369,7455,7541,7628,7714,7800,7886,7972,8059,8145,8231,8317,8403,8489,8576,8662,8748,8834,8920,9007,9093,9179,9265,9351,9438,9524,9610,9696,9782,9868,9955,10041,10127,10213,10299,10386,10472,10558,10644,10730,10816,10903
	};

	//mm_weights : Updated
	const qlstm_int8_t mm_weights_0[Out_N][Inp_N] = {
		    {55, 125, 6, 127, 63, 91, 39, 46, 22, 62},
		    {0, -85, 1, -125, -45, 23, 24, 0, -30, 41},
		    {-7, -6, -35, -24, -2, -7, -48, -13, 22, 43},
		    {-33, 52, -39, 7, 15, -17, 42, -36, -29, 3},
		    {18, 116, 26, 127, 52, 27, 36, -5, 49, 55},
		    {32, -6, 7, 66, 41, 14, 16, -17, 14, -28},
		    {-55, -47, -8, -1, 31, 10, 31, 14, -7, -8},
		    {38, 8, 18, -5, -20, 34, 8, -17, 58, 82},
		    {41, 127, 30, 98, 46, 91, 17, 54, 34, 45},
		    {38, -34, 20, 0, 52, 11, -2, 43, 6, 7},
		    {14, -37, 1, 12, 16, -11, -45, 17, -17, 15},
		    {-18, 44, -25, -28, -23, -17, -17, -39, 6, 18},
		    {-21, 4, 2, -127, -6, 36, -27, -5, -17, 5},
		    {-25, 8, -37, -8, 57, -13, -50, -20, 16, 15},
		    {4, -43, -90, -9, -28, 1, 20, 12, 20, 6},
		    {16, 11, -67, 14, 19, -31, 6, 6, 27, 27},
		    {46, 112, 25, 127, 60, 82, 44, 28, 66, 39},
		    {-10, -35, -12, 15, 21, 10, -30, 6, -13, -1},
		    {-24, -45, -14, 18, 23, 0, 5, -7, -19, -1},
		    {-1, 25, 19, 37, -34, -27, -14, -36, -33, -28}
		};
	const qlstm_int8_t mm_weights_1[Out_N][Inp_N] = {
	    {3, 10, -2, -22, -39, -32, -68, 10, -28, -4},
	    {-28, 34, 3, 20, 47, -25, 108, -49, 18, -4},
	    {45, 95, 49, 109, 72, 41, 45, 52, 36, 34},
	    {47, 30, -2, -8, -45, -7, -58, -13, -14, -13},
	    {-29, 32, -26, -13, -35, -34, -40, -18, -26, -23},
	    {-8, 1, 14, 20, -4, -4, -19, -11, -21, -15},
	    {60, 73, -21, 36, -26, 38, -49, 1, 3, 2},
	    {-24, -19, -10, 8, 3, -11, -16, -7, -18, -13},
	    {-18, -15, -37, 38, -1, -25, -16, -10, -10, -5},
	    {-20, 61, -1, -16, -31, -15, 28, -16, -20, -18},
	    {11, 99, 33, 20, 44, 44, 41, 44, 58, 33},
	    {-16, 62, -11, 12, -29, 3, -97, 2, 5, 21},
	    {76, 28, 35, -20, 40, 74, -42, 25, 9, 43},
	    {73, -19, -18, 82, 1, 63, 50, 84, 24, 19},
	    {44, 42, 32, 29, 31, -4, 26, 7, 45, 31},
	    {13, -44, 11, 39, 20, 103, 127, 62, -22, -14},
	    {-18, 27, -39, -6, -6, -24, -46, -26, -33, -27},
	    {-5, -5, 26, -12, 63, 9, -15, 27, 93, 12},
	    {-4, 27, 21, 7, 59, 79, 2, 10, -19, 68},
	    {66, -1, 2, 35, 21, -4, 77, 34, 8, -29}
	};
	const qlstm_int8_t mm_weights_2[Out_N][Inp_N] = {
	    {-57, 49, -43, -7, 10, -21, 31, -26, 7, -39},
	    {-7, 13, 76, -17, -7, 14, -25, -45, -28, -33},
	    {-46, -10, 29, 44, -31, -39, 8, -19, -55, -25},
	    {-80, -3, -17, 35, -42, -3, -26, -37, -28, -20},
	    {49, 20, 52, 53, 41, -43, 74, -49, 95, -38},
	    {45, -13, 40, 96, 85, 36, -5, 31, 60, 9},
	    {49, -10, -26, -36, -3, -34, -11, 6, 126, 89},
	    {45, 2, 74, -21, 46, 43, -30, -37, 76, 127},
	    {-20, 27, 6, -80, -20, -19, -93, -15, -3, 5},
	    {-22, 25, -7, 14, -34, 17, 37, 2, 31, 55},
	    {-46, 16, -43, 19, 35, 17, 0, -14, 21, -33},
	    {54, 74, 0, 16, 53, 7, -27, 59, 75, -44},
	    {-17, 92, -5, -65, -5, 21, -74, 6, 92, 28},
	    {20, 8, 8, 36, 29, 10, 88, -23, 95, 54},
	    {-32, -45, 86, -24, 39, 6, -14, 16, -33, 23},
	    {-84, 51, -29, -30, -3, 59, 3, 46, -7, 3},
	    {-47, -5, 2, -6, -51, -52, 8, 1, 11, -6},
	    {-45, 23, 23, -18, 33, -3, 41, 30, 7, 7},
	    {9, 16, 19, 35, 44, 32, 65, 82, 99, 21},
	    {91, -27, 16, 45, 47, -17, 100, 10, -26, -61}
	};
	const qlstm_int8_t mm_weights_3[Out_N][Inp_N] = {
			 { -28,   16,  -19,    5,   13,  -24, -103,  -33,    6,  -11},
			 {   7,    2,  -21,  -14,   15,   15,   15,   -5,   23,   12},
			 { -16,   18,    7,   31,  -38,    0,   30,  -26,  -13,  -12},
			 {   9,   10,    2,    5,    9,  -35, -127,   -9,    0,  -12},
			 {  15,    7,   -5,   -5,   21,   34,  -13,   43,    4,   22},
			 {   6,   12,   -7,   28,   13,   30,    0,   35,    1,   33},
			 { -50,    5,  -27,  -30,   -3,   18,  -54,    8,  -30,  -58},
			 {   4,   -1,   -5,  -24,   18,    2,    3,   15,  -11,   -2},
			 {   2,  -78,   -5,   22,  -22,  -14,   46,   -6,  -46,  -25},
			 { -22,  -68,  -29,  -27,  -25,  -37,    5,  -29,    7,  -17},
			 { -14,   -8,  -26,  -10,  -15,    9,  -11,   -1,    0,    6},
			 {   3,  -10,   32,   10,  -62,   -5,   -9,  -15,    0,  -19},
			 {   5,    7,    2,   38,    2,   -3,    4,   10,   -9,    1},
			 {   9,    8,  -13,    4,  -21,   -5,    3,  -15,  -43,   -1},
			 { -59,  -32,  -25,  -23,    6,  -23,   -6,  -31,  -19,  -29},
			 {  41,  -19,   27,    5,   30,    1,   33,   12,   -6,    5},
			 {   0,   23,   -8,  -26,  -14,   -6,  -78,  -23,  -16,  -14},
			 { -15,  -26,   -2,   17,  -31,  -14,  -32,   14,   20,    8},
			 { -48,    6,  -21,    6,  -20,    1,    3,    2,   18,  -16},
			 {  25,   16,    3,    5,   23,    5,   -4,  -14,   -7,   17}
	};
	const qlstm_int8_t mm_weights_4[Out_N][Out_N] = {
			 {  63,  -66,  -69,   48,   60,   40,   -9,    9,   38,   13,   -7,  -62,  -22,  -59,
			   -60,   19,    5,   24,  -51,   -4},
			 { -29,   38,    0,   65,   21,   27,  -16,  -27,  -57,   45,  -29,   -4,  -29,   20,
			    29,   -6,  -19,    0,   31,   -3},
			 {  68,  -14,  -32,   88,   67,   51,  -16,   -5,   25,   27,  -59,   49,   32,  -70,
			   -45,  -19,   71,   28,    0,   17},
			 {  -3,  -54,   -6,   56,   -4,   57,  -77,   -3,   24,    7,  -61,   39,   -7,  -50,
			   -41,   -3,   55,  -37,    1,   19},
			 {  55,  -16,   -8,   39,   57,   16,  -10,   18,   52,   -4,  -29,   -2,   24,  -30,
			   -16,   21,   19,   29,  -42,   44},
			 { -17,    4,  -40,   48,    5,   -3,  -35,    1,   90,  -54,  -31,  -43,   18,  -21,
			   -63,    6,   78,    5,  -27,    0},
			 {  48,    4,  -35,   37,   60,    3,  -18,  -64,   18,   37,   -6,   -1,   70,  -34,
			    32,  -46,   70,    1,   -9,   57},
			 {  28,  -51,  -55,   29,   61,   55,   44,   48,   24,   26,  -76,  -18,   10,  -59,
			   -84,   48,   40,  -22,   24,  -48},
			 {  62,  -44,  -34,   49,   22,   77,   29,   74,   61,   50,  -70,  -12,   36,  -33,
			   -26,   25,   58,  -38,  -28,    2},
			 { -41,   50,  -63,  -43,  -35,   -5,   54,  -38,  -46,  -33,   62,  -36,    1,  -46,
			    26,  -55,  -29,   48,   47,    9},
			 {  19,  -35,  -78,   72,    3,   23,  -29,  -10,   23,   -5,  -14,   22,   92,  -67,
			   -35,  -76,   20,  -49,   12,   42},
			 { -18,  -10,  -29,   51,   29,   30,  -58,  -35,   39,  -24,   13,   23,  -22,  -46,
			    26,  -29,    1,   31,  -21,   28},
			 {  16,  -14,  -31,   63,    5,  -18,    7,  -36,   53,   20,  -18,    8,  -27,  -48,
			    10,  -48,   34,   23,   25,   68},
			 { -20,    5,  -83,   54,  -10,   27,  -25,  -29,   19,  -33,  -21,   -4,   14,  -88,
			   -34,  -27,   59,   34,   63,   64},
			 {  43,  -35,   25,   55,   40,  -38,  -50,  -42,   46,    6,   31,   39,   51,   -9,
			   -25,  -38,   45,  -11,  -46,   20},
			 { -70,   44,   81,  -62,  -61,  -19,   26,   47,  -83,  -10,  -24,  -26,   21,   94,
			    29,    9, -104,   39,  -17,  -18},
			 {  13,  -21,  -67,   12,   59,   65,   -7,   63,   22,   47,  -68,  -34,   19,  -64,
			   -67,   49,   74,  -50,  -65,   -8},
			 {  34,  -70,  -28,   29,    9,   15,  -47,    8,   31,  -10,   -4,   14,  122,  -69,
			   -20, -101,   85,  -65,   13,   95},
			 {  53,  -15,  -25,    3,   49,  -41,  -33,  -83,   62,    8,  -10,   62,   75,  -43,
			   -68,  -55,   18,  -21,   -8,   38},
			 {  24,  -21,  -27,   33,    1,    3,  -36,    3,   61,  -58,  -46,   59,   27,  -13,
			    14,  -36,   63,  -22,    9,   12}
	};
	const qlstm_int8_t mm_weights_5[Out_N][Out_N] = {
			 {  36,  -49,  -39,   75,   57,   24,  -53,  -13,   93,  -21,  -14,   67,    1,  -24,
			   -43,  -52,   53,   -5,   24,   77},
			 { -25,   21,    9,   36,  -21,  -18,   -4,   -2,  -44,   -6,   17,   30,  -27,    9,
			     9,  -43,  -24,   -7,   11,    4},
			 {  78,  -44,  -48,   39,   46,   46,   18,   64,   36,   22,  -29,  -46,  -49,  -34,
			   -68,   38,   96,   -5,  -83,  -67},
			 { -15,  -61,  -27,   33,    3,    0,  -39,   11,   68,  -19,  -31,   51,    4,  -34,
			    -7,  -23,   -1,   10,   50,   34},
			 {  83,  -63,  -13,   78,   70,    1,  -88,    9,   87,  -67,  -55,   65,  -24,  -22,
			   -38,  -35,   78,  -23,  -15,   82},
			 {  46,  -67,  -54,  111,   46,   17, -121,    4,   52,   -9,  -41,  112,   85,  -86,
			   -29,  -97,   38,  -13,   70,   52},
			 {  67,  -40,  -52,   21,   66,   -6,  -50,  -60,   20,   42,  -22,    7,   88,  -76,
			   -14,  -40,   31,    0,   14,   85},
			 {  75,  -49,  -23,   47,   70,   -1,  -63,  -34,   58,  -27,  -47,   51,  100,  -77,
			   -52,  -67,   54,   -3,    9,   79},
			 {  54,  -74,  -15,   58,   48,   50,  -51,   34,   21,   19,  -26,   57,   54,  -66,
			   -63,  -35,   27,  -41,   35,   39},
			 { -28,   26,   71,  -32,  -76,  -35,   -4,    1,   -8,  -21,   18,  -11, -114,  100,
			    35,  102,  -90,  -54,  -68,  -58},
			 {  41,  -31,  -70,   47,   54,  -27,  -31,  -25,  108,  -69,    3,   -2,    1,  -68,
			   -25,   60,  115,   -2,  -18,  -33},
			 {  26,    6,   14,   15,   34,   16,   -6,  -19,   40,  -21,  -30,    2,   32,  -23,
			     7,   -8,    4,   14,   -1,   61},
			 {  29,  -92,  -67,   22,   86,   14,   16,   70,  102,   23,  -57,   31,   69,   -4,
			   -68,  107,  121,  -27,  -34,  -97},
			 {  67,  -39,  -87,   48,   88,   79,   -3,   37,   42,  111,  -62,   19,  -99,   11,
			   -62,  109,   78,  -36,  -84, -100},
			 {  71,  -59,  -33,   33,   46,   64,    8,   35,   49,   51,  -43,   -7,  -26,   -2,
			   -29,   18,   58,  -21,  -20,   19},
			 { -54,   65,   21,  -61,  -28,  -71,   19,   -8,  -15,  -32,   37,   -3,   87,   20,
			     1,  -80,  -35,   20,   35,   66},
			 {  37,  -81,  -33,   83,   64,  -16,  -90,  -25,   71,  -49,   -5,   52,   13,    4,
			   -62,  -12,   60,  -43,  -27,   83},
			 {  43,  -30,  -34,   61,   81,   11,  -12,   -8,   38,   44,  -14,  -11,    9,  -20,
			    -8,  -41,   31,  -51,  -23,   53},
			 {  47,  -42,  -18,   35,   39,   34,    4,   29,   53,   44,  -68,   25,    9,  -16,
			   -63,   46,   57,  -18,  -15,  -11},
			 {  25,  -40,  -26,   25,   66,   21,  -35,   11,  103,  -54,  -82,   40,  -13,  -34,
			   -19,   27,   78,  -15,  -15,  -45}
	};
	const qlstm_int8_t mm_weights_6[Out_N][Out_N] = {
			 {  77,  -48,  -31,   56,   19,   41, -102,  -22,   49,  -60,  -32,   80,   60,  -26,
			   -65,  -93,   92,   -5,   77,   62},
			 {  29,   26,   35,   61,   23,   42,    7,  -32,   22,   38,   36,  -37,   36,    0,
			   -38,   12,   29,  -28,  -25,  -36},
			 {  66,  -60,  -54,   62,   76,   53,  -34,  -16,   74,   19,  -20,   41,  -54,    2,
			   -88,    9,   44,   35,   47,    8},
			 {  32,  -33,   88,  -32,  -18,   18,  -80,   -9,   42,   40,   13,   81,  -31,   91,
			    18,  -28,   -5,  -39,  -25,   14},
			 {  80,  -14,  -48,   38,   45,   69,  -45,   36,   29,   64,   -5,  -39,  -57,    1,
			     5,    8,   75,   -4,   -9,   35},
			 {  38,  -51,    2,   15,   62,  -11,  -58,  -29,   81,   24,  -36,   -1,    9,  -20,
			   -24,   46,   73,   19,  -40,   38},
			 {  94,  -44,  -97,   69,   71,   18,  -78,  -20,    2,    2,   47,    8,   97,  -96,
			   -80, -109,   62,   32,  -42,   76},
			 { 100,  -48,  -85,   50,   40,   93,   18,   52,   73,   26,  -44,  -41,   -8,  -60,
			  -106,   27,   87,   -4,   34,  -36},
			 { -49,  -48,  -61,  107,    6,   26,  -66,   10,  -34,  -54,   12,   68,   30,  -86,
			   -30,  -68,   -7,   72,   56,   72},
			 { -24,   34,  102,  -54,  -77,   -4,   59,   -4,  -49,   51,   34,  -51,  -58,  115,
			    11,   68,  -56,    9,  -69,  -56},
			 {  35,  -70,  -52,    3,  -27,   21,  -75,   13,   -9,  -41,  -15,   40,  107,  -50,
			   -66, -120,  -13,   16,   39,  100},
			 {  65,  -64,  -26,   -5,   14,   65,   51,   58,   53,   71,  -33,  -17,  -14,   -7,
			   -58,   56,   80,  -26,  -45,  -29},
			 {   1,  -11,  -47,   70,   19,  -23,   38,   44,    5,   16,   60,  -56,   16,   28,
			     5,   97,   19,   71,   74,   27},
			 {  62,  -98, -121,  123,   71,   91,    1,   81,   30,  104,  -59,  -68, -100,  -74,
			  -115,   80,  107,  -17,  -15,  -34},
			 {  47,  -25,  -18,   49,   47,  -59,  -18,  -39,   50,   18,   52,   50,   47,    6,
			   -14,  -23,   68,  -42,  -16,   79},
			 { -98,   18,   28,   -2,  -94,  -57,   -6,  -62,  -55,  -67,   -3,    1,  -47,   84,
			    27,  -58,  -15,    8,   39,   69},
			 {  37,  -16,  -26,  113,    1,   18,  -67,    0,   46,   15,  -42,   76,    7,  -47,
			   -36,  -77,    5,  -27,   24,   90},
			 {  70,  -50,  -55,   32,   32,  -57,  -73,   -5,   48,    0,  -26,   29,   98,  -29,
			   -26,  -69,   33,  -12,   17,   90},
			 {  83,  -78, -125,   68,   53,   84,   41,   21,  104,   29,  -71,  -60,  -92, -124,
			   -84,   95,  123,   34,  -23,  -62},
			 {  82,  -42,  -54,   86,  100,   61,  -91,   73,   68,   68,  -58,  120,  -40,  -53,
			   -43,   86,  115,  -66,  -42,  -64}
	};
	const qlstm_int8_t mm_weights_7[Out_N][Out_N] = {
			 { -9, -19, -66,  83,   8,  39, -49,  25,  21, -35, -26,  13,  37, -48, -23, -29,  17,  29,
			   64,  49},
			 {-21, -16,   6,  23,  -6,  28,  12, -12,  -1, -14,  -6, -26,   8,  20,  26, -28,  -2,  17,
			    2, -14},
			 {-50,  48,  27, -23, -15, -18,   0, -21, -59, -29,   7,  18, -46,  31,  36,  16, -45, -67,
			  -27, -16},
			 { -1,  -8, -23,  10,  14,  23,  23,   7,   1,   9,  15,  -5,  33, -35,   6, -25, -10,  11,
			   65,  32},
			 { 29,  -4, -18,  28,   6,  -1, -17,  24,  40,  31, -14,  -2,   1,  10, -27,   6,   2,  -1,
			    8,   0},
			 {  2, -27, -28,  36,  -8, -11, -11, -16,  30, -16, -20, -25,  13,   7, -11, -10,  10,   6,
			   18, -22},
			 { -5,  16,   9,   9,  24,  31,  44,   3, -11,  29, -11, -11,  32,   3,  21,  19,  -8, -22,
			   28, -39},
			 {-17,  16, -14,  -5, -14, -12, -32,  26,  15,  33, -45,  17,  29, -47, -32,   6,  10,  -4,
			  -11,   6},
			 { 30, -28,  -7,  23,   2,   7, -38, -18,  21,  25, -54,  56,  80, -47, -47, -59,  42, -77,
			  -27,  29},
			 {-35,  76,  70,  -7, -84, -37, -34, -60, -78, -36,  58, -12,   7,  49,  27, -52, -90,  46,
			   33,  74},
			 {-16,  13,  -1, -37, -20,  14,  17,  15, -56,   2, -48, -26, -99,  -4,  31,  21, -32, -38,
			  -58, -55},
			 {-33,  29,  51,  -7, -44,  -5, -48,   4, -27, -20,  11,  -5,  -4,  23,  50,  10, -39,  -7,
			   -2,  14},
			 {-17,   9, -20,  10,  -3,   6,  26,  18, -14,  35, -31,  27,  18, -71,  -2, -33, -16,  24,
			   16,  -9},
			 {-32,  60,  55, -71, -19, -22,  51,  14, -22,  -2,   5,  20, -54,   5,  29,   7, -20, -68,
			  -79, -65},
			 {-36,  34,   9, -59, -44, -44,  19, -55, -27, -45,  17,  -5, -23,   0,  33, -29, -52,  26,
			   29,  18},
			 { 16,   2, -34, -13,  -6,  15,  70,  16, -41,   7,  -5, -12,  41, -20,  -8, -10, -32, -11,
			   17, -26},
			 { 25, -24, -48,  69,  23,  35, -14,  36,  15,  -5, -26,  -1,  -4, -12, -31,  -6,  50, -32,
			   27,  30},
			 {-22,  37,   2,  -5,   3, -23,  43, -21, -42,  -5, -17, -36, -91, -50,   3,  21,  -6, -25,
			  -42, -32},
			 {-50,   8, -33,  -1,  11,  32,  64,   1, -72, -15,  -4, -68, -45, -66,  -6,  35,  -7,  11,
			   15, -33},
			 {-11,  26, -13, -11,  10,  24,  32,  28, -11, -15,   0, -66, -15, -53, -16,  20,  24, -10,
			   11,  20}
	};

//--------------------------------------------------------------------------------------------
	qlstm_uint8_t num_steps;
	qlstm_uint8_t tlast_counter=0;
	qlstm_uint8_t num_executions;
	qlstm_f32_t h0[Out_N];
	qlstm_f32_t c0[Out_N];
	ap_axis<32,2,5,6> data_input;
	ap_axis<32,2,5,6> data_output;
//--------------------- Initializing thresholds (MT) and weights (MM) ------------------------
// Updated all three below initialization functions.
	 initializeThresholds_1(mt_weights_3,mt_weights_4,mt_weights_5,mt_weights_6);
	 initializeThresholds_2(mt_weights_0,mt_weights_1,mt_weights_2,mt_weights_7,mt_weights_8,mt_weights_9,mt_weights_10,mt_weights_11,mt_weights_12,mt_weights_13,mt_weights_14,mt_weights_15,mt_weights_16,mt_weights_17);
	 initializeWeights(mm_weights_0,mm_weights_1,mm_weights_2,mm_weights_3,mm_weights_4,mm_weights_5,mm_weights_6,mm_weights_7);

//--------------------- Graph definition ------------------------------------------------------

	 while(x_input_final.empty() == 0){
	 //Adding another while loop for LSTM-layer implementation
	 	num_steps = 0;
	 	 Hidden_cell_initializing_loop: for(int i=0;i<Out_N;++i){
	 		 	 	 h0[i] = 0;
	 		 	 	 c0[i] = 0;
	 	 }
	 	for(int j=0;j<num_lstm_steps;j++){

	 	 	 Input_Stream_loop: for (int i = 0; i < Inp_N; ++i) {
	 	 #pragma HLS pipeline II=1
	 	 		 	 	x_input_final.read(data_input);
	 	 		 	 	data_output = data_input;
	 	 		 	 	qlstm_int8_t out_read0 = th0.activate(0, 0, data_input.data);
	 	 	 		 	out_mt0_0.write(out_read0);
	 	 	 		 	out_mt0_1.write(out_read0);
	 	 	 		    out_mt0_2.write(out_read0);
	 	 	 		    out_mt0_3.write(out_read0);
	 	 	 	     }

	 	 	 Hidden_stream_loop: for (int i = 0; i < Out_N; ++i) {
	 	 #pragma HLS pipeline II=1
	 	 		 	 	 qlstm_f32_t inp_read1 = h0[i] ; 
	 	 				 qlstm_int8_t out_read1 = th1.activate(0, 0, inp_read1);
	 	 		 		 out_mt1_0.write(out_read1);
	 	 		 		 out_mt1_1.write(out_read1);
	 	 		 		 out_mt1_2.write(out_read1);
	 	 		 		 out_mt1_3.write(out_read1);
	 	 		 	     }

	 //First two arguements are height and weight of the weight matrix. Not the input vector.
	 //Instantiaton exactly like "cnvlayer_batch_unit.cpp"
	 //input, output, weights,input_type & weight_type
	 	Matrix_Vector_Activate_Batch<Inp_N,Out_N,1,1,1,Slice<ap_int<8>>,Slice<ap_int<32>>,Identity>//Made the input types ap_uint8 as input type is that. Otherwise it was ap_int8 earlier.
	 		(out_mt0_0, out_mm0, mm_wt_o0, PassThroughActivation<ap_int<32>>(), 1, ap_resource_dsp());
	 	Matrix_Vector_Activate_Batch<Inp_N,Out_N,1,1,1,Slice<ap_int<8>>,Slice<ap_int<32>>,Identity>
	 		(out_mt0_1, out_mm1 , mm_wt_o1, PassThroughActivation<ap_int<32>>(), 1, ap_resource_dsp());
	 	Matrix_Vector_Activate_Batch<Inp_N,Out_N,1,1,1,Slice<ap_int<8>>,Slice<ap_int<32>>,Identity>
	 		(out_mt0_2, out_mm2, mm_wt_o2, PassThroughActivation<ap_int<32>>(), 1, ap_resource_dsp());
	 	Matrix_Vector_Activate_Batch<Inp_N,Out_N,1,1,1,Slice<ap_int<8>>,Slice<ap_int<32>>,Identity>
	 		(out_mt0_3, out_mm3, mm_wt_o3, PassThroughActivation<ap_int<32>>(), 1, ap_resource_dsp());

	 	Matrix_Vector_Activate_Batch<Out_N,Out_N,1,1,1,Slice<ap_int<8>>,Slice<ap_int<32>>,Identity>
	 		(out_mt1_0, out_mm4, mm_wt_o4, PassThroughActivation<ap_int<32>>(), 1, ap_resource_dsp());
	 	Matrix_Vector_Activate_Batch<Out_N,Out_N,1,1,1,Slice<ap_int<8>>,Slice<ap_int<32>>,Identity>
	 		(out_mt1_1, out_mm5, mm_wt_o5, PassThroughActivation<ap_int<32>>(), 1, ap_resource_dsp());
	 	Matrix_Vector_Activate_Batch<Out_N,Out_N,1,1,1,Slice<ap_int<8>>,Slice<ap_int<32>>,Identity>
	 		(out_mt1_2, out_mm6, mm_wt_o6, PassThroughActivation<ap_int<32>>(), 1, ap_resource_dsp());
	 	Matrix_Vector_Activate_Batch<Out_N,Out_N,1,1,1,Slice<ap_int<8>>,Slice<ap_int<32>>,Identity>
	 		(out_mt1_3, out_mm7, mm_wt_o7, PassThroughActivation<ap_int<32>>(), 1, ap_resource_dsp());

	 //Next 4 ElAdd
	 	StreamingEltwise<1,1, Out_N, Slice<qlstm_int32_t>, Slice<qlstm_int32_t>,  Slice<qlstm_int32_t>,
	 	qlstm_int32_t, qlstm_int32_t, qlstm_int32_t, ElAdd<qlstm_int32_t,qlstm_int32_t>>
	 	(out_mm1, out_mm5, out_eladd1, ElAdd<qlstm_int32_t, qlstm_int32_t>());
	 	StreamingEltwise<1,1, Out_N, Slice<qlstm_int32_t>, Slice<qlstm_int32_t>,  Slice<qlstm_int32_t>,
	 	qlstm_int32_t, qlstm_int32_t, qlstm_int32_t, ElAdd<qlstm_int32_t,qlstm_int32_t>>
	 	(out_mm0, out_mm4,out_eladd0 , ElAdd<qlstm_int32_t, qlstm_int32_t>());
	 	StreamingEltwise<1,1, Out_N, Slice<qlstm_int32_t>, Slice<qlstm_int32_t>,  Slice<qlstm_int32_t>,
	 	qlstm_int32_t, qlstm_int32_t, qlstm_int32_t, ElAdd<qlstm_int32_t,qlstm_int32_t>>
	 	(out_mm2, out_mm6,out_eladd3 , ElAdd<qlstm_int32_t, qlstm_int32_t>());
	 	StreamingEltwise<1,1, Out_N, Slice<qlstm_int32_t>, Slice<qlstm_int32_t>,  Slice<qlstm_int32_t>,
	 	qlstm_int32_t, qlstm_int32_t, qlstm_int32_t, ElAdd<qlstm_int32_t,qlstm_int32_t>>
	 	(out_mm3, out_mm7,out_eladd2, ElAdd<qlstm_int32_t, qlstm_int32_t>());

	 //Input cell state MT operation
	 		 MT_0_loop: for (int i = 0; i < Out_N; ++i) {
	 	#pragma HLS pipeline II=1
	 		 		 	 qlstm_f32_t inp_read2 = c0[i] ; //Cell_state_input
	 		 		 	 qlstm_int6_t out_read2 = th2.activate(0, 0, inp_read2);
	 		 		 	 out_inp_cell_state.write(out_read2);
	 		 	     }

	 //4 MT'
	 	 MT_1_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 		 	 qlstm_int32_t inp_read1 = out_eladd0.read();
	 		 	 qlstm_int6_t out_read1 = th4.activate(i, 0, inp_read1);
	 		 	 out_mt1.write(out_read1);
	 		 }
	 	 MT_2_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 	 		 qlstm_int32_t inp_read2 = out_eladd1.read();
	 	 		 qlstm_int6_t out_read2 = th3.activate(i, 0, inp_read2);
	 	 		 out_mt2.write(out_read2);
	 	 	 }
	 	 MT_3_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 	 		 qlstm_int32_t inp_read3 = out_eladd2.read();
	 	 		 qlstm_int6_t out_read3= th6.activate(i, 0, inp_read3);
	 	 		 out_mt3.write(out_read3);
	 	 }

	 	 MT_4_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 	 		 qlstm_int32_t inp_read4 = out_eladd3.read();
	 	 		 qlstm_int6_t out_read4 = th5.activate(i, 0, inp_read4);
	 	 		 out_mt4.write(out_read4);
	 	}

	 //Next 4 MT's
	 	 MT_5_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 		 	 qlstm_int6_t inp_read5 = out_mt2.read();
	 	 		 qlstm_uint6_t out_read5 = th_act7.activate(0, 0, inp_read5);
	 	 		 out_mt5.write(out_read5);
	 	 	 }

	 	 MT_6_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 		 	 qlstm_int6_t inp_read6 = out_mt1.read();
	 		 	 qlstm_int7_t out_read6 = th_act8.activate(0, 0, inp_read6);
	 		 	 out_mt6.write(out_read6);
	 	 }

	 	 MT_7_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 		 	 qlstm_int6_t inp_read7 = out_mt4.read();
	 		 	 qlstm_uint6_t out_read7 = th_act9.activate(0, 0, inp_read7);
	 	 		 out_mt7.write(out_read7);
	 	}

	 	 MT_8_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 		 	 qlstm_int6_t inp_read8 = out_mt3.read();
	 		 	 qlstm_uint6_t out_read8 = th_act10.activate(0, 0, inp_read8);
	 	 		 out_mt8.write(out_read8);
	 	}


	 //ElMul : 24th Op
	 	StreamingEltwise<1,1, Out_N, Slice<qlstm_uint6_t>, Slice<qlstm_int6_t>, Slice<qlstm_int32_t>,
	 	qlstm_uint6_t, qlstm_int6_t, qlstm_int32_t, ElMul<qlstm_uint6_t,qlstm_int6_t,qlstm_int32_t>>
	 	(out_mt8, out_inp_cell_state, out_elmul0, ElMul<qlstm_uint6_t,qlstm_int6_t, qlstm_int32_t>());

	 //ElMul : 25th Op
	 	StreamingEltwise<1,1, Out_N, Slice<qlstm_uint6_t>, Slice<qlstm_int7_t>, Slice<qlstm_int32_t>,
	 	qlstm_uint6_t, qlstm_int7_t, qlstm_int32_t, ElMul<qlstm_uint6_t,qlstm_int7_t,qlstm_int32_t>>
	 	(out_mt7, out_mt6, out_elmul1, ElMul<qlstm_uint6_t,qlstm_int7_t, qlstm_int32_t>());

	 //Next 2 MT : 26 and 27
	 	 MT_9_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 	 	 		 qlstm_int32_t inp_read9 = out_elmul0.read();
	 	 	 		 qlstm_int6_t out_read9 = th11.activate(0, 0, inp_read9);
	 	 	 		 out_mt9.write(out_read9);
	 	 	 }

	 	 MT_10_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 	 	 		 qlstm_int32_t inp_read10 = out_elmul1.read();
	 	 	 		 qlstm_int6_t out_read10 = th12.activate(0, 0, inp_read10);
	 	 	 		 out_mt10.write(out_read10);
	 	 	}

	 //Next ElAdd : 28
	 	 StreamingEltwise<1,1, Out_N, Slice<qlstm_int6_t>, Slice<qlstm_int6_t>,  Slice<qlstm_int32_t>,
	 	 qlstm_int6_t, qlstm_int6_t, qlstm_int32_t, ElAdd<qlstm_int6_t,qlstm_int32_t>>
	 	 (out_mt9, out_mt10, out_eladd4, ElAdd<qlstm_int6_t, qlstm_int32_t>());



	 //Next Scalar Mul : 29
	 	 MT_11_loop_1 : for(int i=0;i<Out_N;++i) {
	 #pragma HLS pipeline II=1
	 	 		  qlstm_int32_t element = out_eladd4.read();
	 	 		  out_eladd4_2.write(element);
	 	 		  out_eladd4_3.write(element);
	 	 	    }

	 //Next 2 MT : 30 & 31
	 	 	 float mul_param2 = 0.03176329657435417;
	 	 	 MT_11_loop_2: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 	 		 	 		 qlstm_int32_t inp_read11 = out_eladd4_2.read();
	 	 		 	 		 qlstm_int6_t out_read11 = th13.activate(0, 0, inp_read11);
	 	 		 	 		 qlstm_f32_t result = mul(out_read11, mul_param2, ap_resource_dflt());
	 	 		 	 		 c0[i] = result;
	 	 		 	 }

	 	 	 MT_11_loop_3: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 	 		 	 		 qlstm_int32_t inp_read11 = out_eladd4_3.read();
	 	 		 	 		 qlstm_int6_t out_read11 = th14.activate(0, 0, inp_read11);
	 	 		 	 		 out_mt11.write(out_read11);
	 	 		 	 }

	 	 	 MT_12_loop: for (int i = 0; i < Out_N; ++i) {
	 #pragma HLS pipeline II=1
	 	 		 	 		 qlstm_int6_t inp_read12 = out_mt11.read();
	 	 		 	 		 qlstm_int7_t out_read12 = th15.activate(0, 0, inp_read12);
	 	 		 	 		 out_mt12.write(out_read12);
	 	 		 	}

	 //Next Elmul : 32
	 	 	StreamingEltwise<1,1, Out_N, Slice<qlstm_int7_t>, Slice<qlstm_uint6_t>, Slice<qlstm_int32_t>,
	 		qlstm_int7_t, qlstm_uint6_t, qlstm_int32_t, ElMul<qlstm_int7_t,qlstm_uint6_t,qlstm_int32_t>>
	 	 	(out_mt12, out_mt5, out_elmul3, ElMul<qlstm_int7_t,qlstm_uint6_t, qlstm_int32_t>());


	 		 MT_14_loop_1 : for(int i=0;i<Out_N;++i) {
	 	#pragma HLS pipeline II=1
	 		 		  qlstm_int32_t element = out_elmul3.read();
	 		 		  out_elmul3_2.write(element);
	 		 		  out_elmul3_3.write(element);
	 		 	    }

	 //Last op : 34 : Scalar mul
	 	 	float mul_param3 = 0.03155536949634552;
	 	 		 	  for(int i=0;i<Out_N;++i) {
	 #pragma HLS pipeline II=1
	 	 		 		  qlstm_int32_t element = out_elmul3_2.read();
	 	 		 		  qlstm_int8_t out_read14 = th16.activate(0, 0, element);
	 	 		 		  qlstm_f32_t result = mul(out_read14, mul_param3, ap_resource_dflt());
	 	 		 		  h0[i] = result;
	 	 		 	  }

	 	 		 	  for(int i=0;i<Out_N;++i) {
	 #pragma HLS pipeline II=1
	 	 		 		  qlstm_int32_t element = out_elmul3_3.read();
	 	 		 		  qlstm_int8_t out_read14 = th17.activate(0, 0, element);
	 	 		 		  //mt_1_test.write(out_read14);
	 	 		 		  if(num_steps == num_lstm_steps - 1){
	 	 		 		  out_sm3.write(out_read14);
	 	 		 		  }
	 	 		 	  }
	 	 	num_steps++;
	 	}

	 //------- Capturing the last hidden state ----------------------------------
		 for(int i=0;i<Out_N;++i) {
		 #pragma HLS pipeline II=1
		 	 		  qlstm_int32_t element = out_sm3.read();
		 	 		  data_output = data_input; //This statement helps in correctly passing all the ap_axis flags to the data_output ap_axis which get finally written to final_output.
		 	 		  data_output.data = element;
		 	 		  final_output.write(data_output);
		 	 	  }
	 } 
}
